├── main.py
│   └── Description:
│       Orchestrates the overall workflow of the application, managing the creation and handling userr configs from 
user-provided files .....
 


├── lookup_xlx
│   ├── dhw_lookup.xlsx
│   ├── elec_schedules.xlsx
│   ├── epw_lookup.xlsx
│   ├── geometry_lookup.xlsx
│   ├── groundtemp_lookup.xlsx
│   ├── hvac_lookup.xlsx
│   ├── lighting_lookup.xlsx
│   ├── materials.xlsx
│   └── ventilation_lookup_data.xlsx
│   └── Description:
│       Contains the default Excel files used to generate corresponding Python lookup modules. Users can drag and drop their own Excel files here, which will override existing files either in-memory or permanently. 
These files can also be updated based on calibration results, with column integrity checks enforced.
 

├── user_configs for idf creation
│   ├── dhw_lookup.json
│   ├── elec_schedules.json
│   ├── epw_lookup.json
│   ├── geometry_lookup.json
│   ├── groundtemp_lookup.json
│   ├── hvac_lookup.json
│   ├── lighting_lookup.json
│   ├── materials.json
│   └── ventilation_lookup_data.json
│   └── area_of_interest.json
│   └── shadow.json
│   └── ..... .json
│   └── user config for validation
│   └── user config for modifications
here to initiate the modification we will define a structure. 
for example to initiate it if vaidation is not valid under threeshold, and we will define ruls for generating new scenarios.
other can be that we will define a structure for the modification and we will define the rules for the modification.
we can use it for the surrogate, sensitive and optimization or any other objectives.
picking values strategy, range or combination of values can be here. 


│   └── user configs surrogate
│   └── user configs sensitive
│   └── user configs calibration

here will define .....

│   └── Description:
│       Stores user-specific configuration files received from the user interface. These configurations override the default lookup files in `lookup_xlsx/` or partly in lookups in py files when present,
 ensuring personalized settings are applied during execution.
   
Validation Configs: Within the validation/ directory, user configurations for validation can be managed through configuration files or scripts that allow users to define thresholds and validation criteria.

Modification Configs: Similarly, in the modification/ directory, user configurations can define rules and strategies for parameter modifications, enabling dynamic scenario generation based on validation outcomes.








├── data/
│   ├── df_buildings.csv
│   ├── df_focus.csv
│   └── df_trees.csv
│   └── Description:
│       Contains data frames loaded from a PostgreSQL database. For testing purposes, CSV files are used. These data frames are essential for building models and simulations.
│   └── pysql.py   here we will add py file to connect database and based on user confiig area of interets will be extracted and saved as dataframes



├── main_create_idf.py
│   └── Description:
│       Handles the creation of IDF (Input Data File) files for buildings. It imports necessary modules, defines functions for creating and managing IDF files, and processes CSV inputs to generate structured outputs. The results are saved in designated output folders.
│   
│   └── Imports:
│       │   os
│       │   logging
│           pandas
│   └── From Imports:
│       │   from geomeppy import IDF
│       │   from geomz.building import create_building_with_roof_type
│       │   from geomz.geometry_overrides_from_excel import read_geometry_overrides_excel
│       │   from fenez.fenestration import add_fenestration
│       │   from fenez.materials import update_construction_materials
│       │   from fenez.materials import assign_constructions_to_surfaces
│       │   from fenez.dict_override_excel import override_dictionaries_from_excel
│       │   from Elec.lighting import add_lights_and_parasitics
│       │   from Elec.lighting_lookup import lighting_lookup
│       │   from Elec.lighting_overrides_from_excel import read_lighting_overrides_from_excel
│       │   from Elec.lighting_overrides_from_excel import apply_lighting_overrides_to_lookup
│       │   from DHW.water_heater import add_dhw_to_idf
│       │   from DHW.dhw_lookup import dhw_lookup
│       │   from DHW import dhw_lookup
│       │   from DHW.dhw_overrides_from_excel import override_dhw_lookup_from_excel
│       │   from HVAC.custom_hvac import add_HVAC_Ideal_to_all_zones
│       │   from HVAC.hvac_lookup import hvac_lookup
│       │   from HVAC.hvac_overrides_from_excel import read_hvac_overrides_from_excel
│       │   from HVAC.hvac_overrides_from_excel import apply_hvac_overrides_to_lookup
│       │   from ventilation.add_ventilation import add_ventilation_to_idf
│       │   from ventilation.ventilation_lookup import ventilation_lookup
│       │   from ventilation.ventilation_overrides_from_excel import read_ventilation_overrides_from_excel
│       │   from ventilation.ventilation_overrides_from_excel import apply_ventilation_overrides_to_lookup
│       │   from setzone.add_outdoor_air_and_zone_sizing_to_all_zones import add_outdoor_air_and_zone_sizing_to_all_zones
│       │   from tempground.add_ground_temperatures import add_ground_temperatures
│       │   from outputdef.assign_output_settings import assign_output_settings
│       │   from outputdef.add_output_definitions import add_output_definitions
│       │   from postproc.merge_results import merge_all_results
│       │   from other.zonelist import create_zonelist
│       │   from epw.run_epw_sims import simulate_all
│       │   from epw.epw_lookup import epw_lookup
│       │   from epw.epw_overrides_from_excel import read_epw_overrides_from_excel
│       │   from epw.epw_overrides_from_excel import apply_epw_overrides_to_lookup
│       │   from fenez.data_materials_residential import residential_materials_data
│       │   from fenez.data_materials_non_residential import non_residential_materials_data
│           from shading.shading import add_shading_to_idf
│   └── Functions:
│       │   create_idf_for_building
│           main
│   └── CSV Inputs:
│       │   df_focus.csv
│       │   df_trees.csv
│           df_buildings.csv
│   └── CSV Outputs:
│       │   output/assigned/assigned_geometry.csv
│       │   output/assigned/assigned_lighting.csv
│       │   output/assigned/assigned_dhw_params.csv
│       │   output/assigned/assigned_hvac_params.csv
│       │   output/assigned/assigned_ventilation.csv
│       │   output/assigned/assigned_epw_paths.csv
│       │   output/assigned/assigned_ground_temps.csv
│           output/assigned/assigned_setzone_params.csv



│   
├── DHW/
│   └── Description:
│       Module handling Domestic Hot Water (DHW) related functionalities, including lookup management and overrides.
│   
├── Elec/
│   └── Description:
│       Module managing electrical schedules, lighting, and parasitic loads, including lookup and override functionalities.
│   
├── epw/
│   └── Description:
│       Handles EnergyPlus Weather (EPW) data processing, lookup management, and overrides from Excel files.
│   
├── fenez/
│   └── Description:
│       Manages fenestration (windows and glazing) related functionalities, including material updates and construction assignments.
│   
├── geomz/
│   └── Description:
│       Handles building geometry creation and overrides based on Excel data.
│   
├── HVAC/
│   └── Description:
│       Manages Heating, and Air Conditioning (HVAC) systems, including lookup management and overrides from Excel files.
│   
├── other/
│   └── Description:
│       Contains miscellaneous modules and utilities that do not fit into other categories.
│   
├── postproc/
│   └── Description:
│       Handles post-processing tasks, such as merging simulation results and assigning output settings.
│   
├── setzone/
│   └── Description:
│       Manages zone sizing and outdoor air parameters for all zones in the building models.
│   
├── shading/
│   └── Description:
│       Manages shading elements within the IDF files, including their creation and assignment.
│   
├── tempground/
│   └── Description:
│       Handles ground temperature data integration into the building models.
│   
├── ventilation/
│   └── Description:
│       Manages ventilation systems, including lookup management and overrides from Excel files.
│   
├── outputdef/
│   └── Description:
│       Defines and assigns output settings for simulations, ensuring consistent result generation.
│   








├── DHW
│   ├── __pycache__
│   │   ├── assign_dhw_values.cpython-39.pyc
│   │   ├── building_type_map.cpython-39.pyc
│   │   ├── constants.cpython-39.pyc
│   │   ├── dhw_lookup.cpython-39.pyc
│   │   ├── dhw_overrides_from_excel.cpython-39.pyc
│   │   ├── parameters.cpython-39.pyc
│   │   ├── schedules.cpython-39.pyc
│   │   └── water_heater.cpython-39.pyc
│   ├── assign_dhw_values.py
│   │   └── Imports:
│   │           random
│   │   └── From Imports:
│   │           from dhw_lookup import dhw_lookup
│   │   └── Functions:
│   │       │   find_dhw_overrides
│   │       │   pick_val_with_range
│   │       │   assign_dhw_parameters
│   │           override_range
│   ├── building_type_map.py
│   │   └── Functions:
│   │           map_building_function_to_dhw_key
│   ├── dhw.tex
│   ├── dhw_lookup.py
│   ├── dhw_overrides_from_excel.py
│   │   └── Imports:
│   │       │   pandas
│   │           copy
│   │   └── Functions:
│   │           override_dhw_lookup_from_excel
│   ├── parameters.py
│   │   └── Functions:
│   │           calculate_dhw_parameters
│   ├── schedules.py
│   │   └── Functions:
│   │           create_dhw_schedules
│   └── water_heater.py
│       └── From Imports:
│           │   from assign_dhw_values import assign_dhw_parameters
│           │   from parameters import calculate_dhw_parameters
│               from schedules import create_dhw_schedules
│       └── Functions:
│               add_dhw_to_idf
├── Elec
│   ├── __pycache__
│   │   ├── assign_lighting_values.cpython-39.pyc
│   │   ├── constants.cpython-39.pyc
│   │   ├── elec_overrides_from_excel.cpython-39.pyc
│   │   ├── lighting.cpython-39.pyc
│   │   ├── lighting_lookup.cpython-39.pyc
│   │   ├── lighting_overrides_from_excel.cpython-39.pyc
│   │   ├── overrides_helper.cpython-39.pyc
│   │   ├── schedule_def.cpython-39.pyc
│   │   └── schedules.cpython-39.pyc
│   ├── assign_lighting_values.py
│   │   └── Imports:
│   │           random
│   │   └── From Imports:
│   │       │   from lighting_lookup import lighting_lookup
│   │       │   from constants import DEFAULT_LIGHTING_WM2
│   │       │   from constants import DEFAULT_PARASITIC_WM2
│   │       │   from constants import DEFAULT_TD
│   │       │   from constants import DEFAULT_TN
│   │       │   from constants import DEFAULT_EQUIP_FRACTION_LOST
│   │           from overrides_helper import find_applicable_overrides
│   │   └── Functions:
│   │       │   assign_lighting_parameters
│   │           pick_val
│   ├── constants.py
│   ├── light.tex
│   ├── lighting.py
│   │   └── From Imports:
│   │       │   from assign_lighting_values import assign_lighting_parameters
│   │       │   from schedules import create_lighting_schedule
│   │           from schedules import create_parasitic_schedule
│   │   └── Functions:
│   │       │   get_building_category_and_subtype
│   │           add_lights_and_parasitics
│   ├── lighting_lookup.py
│   ├── lighting_overrides_from_excel.py
│   │   └── Imports:
│   │       │   pandas
│   │           copy
│   │   └── Functions:
│   │       │   read_lighting_overrides_from_excel
│   │           apply_lighting_overrides_to_lookup
│   ├── overrides_helper.py
│   │   └── Functions:
│   │           find_applicable_overrides
│   ├── schedule_def.py
│   │   └── Imports:
│   │           pandas
│   │   └── Functions:
│   │       │   read_schedule_overrides_from_excel
│   │           apply_schedule_overrides_to_schedules
│   └── schedules.py
│       └── From Imports:
│               from schedule_def import SCHEDULE_DEFINITIONS
│       └── Functions:
│           │   create_lighting_schedule
│               create_parasitic_schedule
├── epw
│   ├── __pycache__
│   │   ├── assign_epw_file.cpython-39.pyc
│   │   ├── epw_lookup.cpython-39.pyc
│   │   ├── epw_overrides_from_excel.cpython-39.pyc
│   │   └── run_epw_sims.cpython-39.pyc
│   ├── assign_epw_file.py
│   │   └── Imports:
│   │           math
│   │   └── From Imports:
│   │           from epw_lookup import epw_lookup
│   │   └── Functions:
│   │       │   find_epw_overrides
│   │       │   assign_epw_for_building_with_overrides
│   │           pick_epw_from_lookup
│   ├── epw_lookup.py
│   ├── epw_lookup_generated.py
│   ├── epw_overrides_from_excel.py
│   │   └── Imports:
│   │       │   pandas
│   │           copy
│   │   └── Functions:
│   │       │   read_epw_overrides_from_excel
│   │           apply_epw_overrides_to_lookup
│   └── run_epw_sims.py
│       └── Imports:
│           │   os
│               logging
│       └── From Imports:
│           │   from eppy.modeleditor import IDF
│           │   from multiprocessing import Pool
│               from assign_epw_file import assign_epw_for_building_with_overrides
│       └── Functions:
│           │   run_simulation
│           │   generate_simulations
│               simulate_all
├── fenez
│   ├── __pycache__
│   │   ├── assign_fenestration_values.cpython-39.pyc
│   │   ├── data_materials_non_residential.cpython-39.pyc
│   │   ├── data_materials_residential.cpython-39.pyc
│   │   ├── dhw_functions.cpython-39.pyc
│   │   ├── dict_override_excel.cpython-39.pyc
│   │   ├── fenestration.cpython-39.pyc
│   │   ├── materials.cpython-39.pyc
│   │   ├── materials_config.cpython-39.pyc
│   │   └── materials_lookup.cpython-39.pyc
│   ├── 4.md
│   ├── assign_fenestration_values.py
│   │   └── From Imports:
│   │       │   from materials_config import get_extended_materials_data
│   │           from materials_config import compute_wwr
│   │   └── Functions:
│   │           assign_fenestration_parameters
│   ├── data_materials_non_residential.py
│   ├── data_materials_residential.py
│   ├── dict_override_excel.py
│   │   └── Imports:
│   │       │   pandas
│   │       │   copy
│   │           math
│   │   └── Functions:
│   │           override_dictionaries_from_excel
│   ├── fenestration.py
│   │   └── From Imports:
│   │       │   from geomeppy import IDF
│   │           from assign_fenestration_values import assign_fenestration_parameters
│   │   └── Functions:
│   │           add_fenestration
│   ├── materials.py
│   │   └── From Imports:
│   │       │   from geomeppy import IDF
│   │           from materials_config import get_extended_materials_data
│   │   └── Functions:
│   │       │   _store_material_picks
│   │       │   update_construction_materials
│   │       │   assign_constructions_to_surfaces
│   │       │   create_opaque_material
│   │           create_window_material
│   ├── materials_config.py
│   │   └── Imports:
│   │           random
│   │   └── From Imports:
│   │       │   from data_materials_residential import residential_materials_data
│   │       │   from data_materials_non_residential import non_residential_materials_data
│   │           from materials_lookup import material_lookup
│   │   └── Functions:
│   │       │   pick_val
│   │       │   assign_material_from_lookup
│   │       │   compute_wwr
│   │           get_extended_materials_data
│   └── materials_lookup.py
├── geomz
│   ├── __pycache__
│   │   ├── __init__.cpython-39.pyc
│   │   ├── assign_geometry_values.cpython-39.pyc
│   │   ├── building.cpython-39.pyc
│   │   ├── geometry.cpython-39.pyc
│   │   ├── geometry_lookup.cpython-39.pyc
│   │   ├── geometry_overrides_from_excel.cpython-39.pyc
│   │   ├── override_geometry_lookup_from_excel.cpython-39.pyc
│   │   └── zoning.cpython-39.pyc
│   ├── __init__.py
│   ├── assign_geometry_values.py
│   │   └── Imports:
│   │           random
│   │   └── From Imports:
│   │       │   from geometry_lookup import geometry_lookup
│   │           from geometry_overrides_from_excel import pick_geom_params_from_rules
│   │   └── Functions:
│   │       │   find_geom_overrides
│   │       │   pick_val_with_range
│   │           assign_geometry_values
│   ├── building.py
│   │   └── From Imports:
│   │       │   from assign_geometry_values import assign_geometry_values
│   │       │   from geometry import compute_dimensions_from_area_perimeter
│   │       │   from geometry import create_building_base_polygon
│   │       │   from zoning import create_zones_with_perimeter_depth
│   │           from zoning import link_surfaces
│   │   └── Functions:
│   │           create_building_with_roof_type
│   ├── geometry.py
│   │   └── Imports:
│   │           math
│   │   └── From Imports:
│   │       │   from math import sqrt
│   │       │   from math import radians
│   │       │   from math import cos
│   │           from math import sin
│   │   └── Functions:
│   │       │   rotate_point
│   │       │   compute_dimensions_from_area_perimeter
│   │       │   create_building_base_polygon
│   │       │   polygon_area
│   │       │   inward_offset_polygon
│   │       │   edge_offset
│   │           line_intersect
│   ├── geometry_lookup.py
│   ├── geometry_overrides_from_excel.py
│   │   └── Imports:
│   │       │   pandas
│   │       │   copy
│   │           math
│   │   └── Functions:
│   │       │   read_geometry_overrides_excel
│   │           pick_geom_params_from_rules
│   ├── geometry_overrides_helper.py
│   │   └── Functions:
│   │           find_geom_overrides
│   ├── override_geometry_lookup_from_excel.py
│   │   └── Functions:
│   │           override_geometry_lookup_from_excel
│   └── zoning.py
│       └── From Imports:
│           │   from geometry import polygon_area
│               from geometry import inward_offset_polygon
│       └── Functions:
│           │   link_surfaces
│           │   create_zone_surfaces
│           │   create_zones_with_perimeter_depth
│           │   edge_to_bc
│               get_wall
├── HVAC
│   ├── __pycache__
│   │   ├── assign_hvac_values.cpython-39.pyc
│   │   ├── custom_hvac.cpython-39.pyc
│   │   ├── hvac_lookup.cpython-39.pyc
│   │   └── hvac_overrides_from_excel.cpython-39.pyc
│   ├── assign_hvac_values.py
│   │   └── Imports:
│   │           random
│   │   └── From Imports:
│   │           from hvac_lookup import hvac_lookup
│   │   └── Functions:
│   │       │   find_hvac_overrides
│   │       │   pick_val_with_range
│   │       │   assign_hvac_ideal_parameters
│   │           override_range
│   ├── custom_hvac.py
│   │   └── From Imports:
│   │           from assign_hvac_values import assign_hvac_ideal_parameters
│   │   └── Functions:
│   │           add_HVAC_Ideal_to_all_zones
│   ├── hvac.tex
│   ├── hvac_lookup.py
│   └── hvac_overrides_from_excel.py
│       └── Imports:
│               pandas
│       └── Functions:
│           │   read_hvac_overrides_from_excel
│               apply_hvac_overrides_to_lookup
├── other
│   ├── __pycache__
│   │   └── zonelist.cpython-39.pyc
│   ├── add_ventilation.py
│   │   └── From Imports:
│   │       │   from ventilation.assign_ventilation_values import assign_ventilation_params_with_overrides
│   │       │   from ventilation.schedules import create_always_on_schedule
│   │       │   from ventilation.schedules import create_day_night_schedule
│   │       │   from ventilation.schedules import create_workhours_schedule
│   │       │   from ventilation.calc_functions import calc_infiltration
│   │       │   from ventilation.calc_functions import calc_required_ventilation_flow
│   │       │   from ventilation.mappings import safe_lower
│   │       │   from ventilation.mappings import map_age_range_to_year_key
│   │       │   from ventilation.mappings import map_infiltration_key
│   │           from ventilation.mappings import map_usage_key
│   │   └── Functions:
│   │           add_ventilation_to_idf
│   └── zonelist.py
│       └── Functions:
│               create_zonelist
├── postproc
│   ├── __pycache__
│   │   ├── merge_results.cpython-39.pyc
│   │   ├── post_process_simulations.cpython-39.pyc
│   │   └── postprocess_results.cpython-39.pyc
│   ├── merge_results.py
│   │   └── Imports:
│   │       │   os
│   │       │   re
│   │       │   pandas
│   │           numpy
│   │   └── From Imports:
│   │       │   from datetime import datetime
│   │       │   from datetime import timedelta
│   │           from calendar import month_name
│   │   └── Functions:
│   │       │   merge_all_results
│   │       │   aggregate_series
│   │       │   correct_time
│   │       │   parse_dt
│   │           safe_dt
│   └── Untitled-1.py
│       └── Imports:
│           │   os
│           │   re
│           │   pandas
│               numpy
│       └── From Imports:
│           │   from datetime import datetime
│           │   from datetime import timedelta
│               from postproc.merge_results import merge_all_results
│       └── Functions:
│           │   merge_all_results
│           │   postprocess
│           │   aggregate_series
│           │   correct_time
│               parse_dt
├── setzone
│   ├── __pycache__
│   │   ├── add_outdoor_air_and_zone_sizing.cpython-39.pyc
│   │   ├── add_outdoor_air_and_zone_sizing_to_all_zones.cpython-39.pyc
│   │   ├── assign_zone_sizing_values.cpython-39.pyc
│   │   ├── define_global_design_specs.cpython-39.pyc
│   │   └── zone_sizing_lookup.cpython-39.pyc
│   ├── add_outdoor_air_and_zone_sizing_to_all_zones.py
│   │   └── From Imports:
│   │       │   from geomeppy import IDF
│   │       │   from assign_zone_sizing_values import assign_zone_sizing_params
│   │           from define_global_design_specs import define_global_design_specs
│   │   └── Functions:
│   │           add_outdoor_air_and_zone_sizing_to_all_zones
│   ├── assign_zone_sizing_values.py
│   │   └── Imports:
│   │           random
│   │   └── From Imports:
│   │           from zone_sizing_lookup import zone_sizing_lookup
│   │   └── Functions:
│   │       │   assign_zone_sizing_params
│   │           pick_val
│   ├── define_global_design_specs.py
│   │   └── Functions:
│   │           define_global_design_specs
│   └── zone_sizing_lookup.py
├── shading
│   ├── __pycache__
│   │   ├── shading.cpython-39.pyc
│   │   ├── shading_assign.cpython-39.pyc
│   │   ├── shading_creator.cpython-39.pyc
│   │   ├── shading_filter.cpython-39.pyc
│   │   └── transmittance_schedules.cpython-39.pyc
│   ├── shading.py
│   │   └── Imports:
│   │       │   json
│   │           pandas
│   │   └── From Imports:
│   │       │   from shading_creator import create_shading_detailed
│   │           from transmittance_schedules import create_tree_trans_schedule
│   │   └── Functions:
│   │           add_shading_to_idf
│   ├── shading_creator.py
│   │   └── Imports:
│   │           ast
│   │   └── Functions:
│   │           create_shading_detailed
│   └── transmittance_schedules.py
│       └── Functions:
│               create_tree_trans_schedule
├── tempground
│   ├── __pycache__
│   │   ├── add_ground_temperatures.cpython-39.pyc
│   │   ├── assign_groundtemp_values.cpython-39.pyc
│   │   └── groundtemp_lookup.cpython-39.pyc
│   ├── add_ground_temperatures.py
│   │   └── From Imports:
│   │           from assign_groundtemp_values import assign_ground_temperatures
│   │   └── Functions:
│   │           add_ground_temperatures
│   ├── assign_groundtemp_values.py
│   │   └── Imports:
│   │           random
│   │   └── From Imports:
│   │           from groundtemp_lookup import groundtemp_lookup
│   │   └── Functions:
│   │       │   assign_ground_temperatures
│   │           pick_val
│   └── groundtemp_lookup.py
├── ventilation
│   ├── __pycache__
│   │   ├── add_ventilation.cpython-39.pyc
│   │   ├── assign_ventilation_values.cpython-39.pyc
│   │   ├── calc_functions.cpython-39.pyc
│   │   ├── config_systems.cpython-39.pyc
│   │   ├── create_ventilation_systems.cpython-39.pyc
│   │   ├── mappings.cpython-39.pyc
│   │   ├── schedules.cpython-39.pyc
│   │   ├── ventilation_lookup.cpython-39.pyc
│   │   └── ventilation_overrides_from_excel.cpython-39.pyc
│   ├── add_ventilation.py
│   │   └── From Imports:
│   │       │   from ventilation.assign_ventilation_values import assign_ventilation_params_with_overrides
│   │       │   from ventilation.schedules import create_always_on_schedule
│   │       │   from ventilation.schedules import create_day_night_schedule
│   │       │   from ventilation.schedules import create_workhours_schedule
│   │       │   from ventilation.create_ventilation_systems import create_ventilation_system
│   │       │   from ventilation.calc_functions import calc_infiltration
│   │       │   from ventilation.calc_functions import calc_required_ventilation_flow
│   │       │   from ventilation.mappings import safe_lower
│   │       │   from ventilation.mappings import map_age_range_to_year_key
│   │       │   from ventilation.mappings import map_infiltration_key
│   │           from ventilation.mappings import map_usage_key
│   │   └── Functions:
│   │           add_ventilation_to_idf
│   ├── assign_ventilation_values.py
│   │   └── Imports:
│   │           random
│   │   └── From Imports:
│   │           from ventilation_lookup import ventilation_lookup
│   │   └── Functions:
│   │       │   find_vent_overrides
│   │       │   pick_val_with_range
│   │       │   assign_ventilation_params_with_overrides
│   │           override_range
│   ├── calc_functions.py
│   │   └── Imports:
│   │           math
│   │   └── Functions:
│   │       │   calc_infiltration
│   │       │   calc_required_ventilation_flow
│   │           calc_fan_power
│   ├── config_systems.py
│   ├── create_ventilation_systems.py
│   │   └── Imports:
│   │           random
│   │   └── From Imports:
│   │           from ventilation.config_systems import SYSTEMS_CONFIG
│   │   └── Functions:
│   │       │   create_ventilation_system
│   │           pick_val
│   ├── mappings.py
│   │   └── Functions:
│   │       │   safe_lower
│   │       │   map_age_range_to_year_key
│   │       │   map_infiltration_key
│   │       │   map_usage_key
│   │           map_ventilation_system
│   ├── schedules.py
│   │   └── From Imports:
│   │           from geomeppy import IDF
│   │   └── Functions:
│   │       │   create_always_on_schedule
│   │       │   create_day_night_schedule
│   │       │   create_workhours_schedule
│   │       │   create_schedule_from_pattern
│   │       │   create_schedule_from_weekday_weekend_pattern
│   │           ensure_dynamic_schedule
│   ├── vent.tex
│   ├── ventilation_lookup.py
│   └── ventilation_overrides_from_excel.py
│       └── Imports:
│           │   pandas
│           │   copy
│               math
│       └── Functions:
│           │   read_ventilation_overrides_from_excel
│           │   apply_ventilation_overrides_to_lookup
│               is_number
├── outputdef
│   ├── add_output_definitions.py
│   │   └── Functions:
│   │           add_output_definitions
│   ├── assign_output_settings.py
│   │   └── From Imports:
│   │           from output_lookup import output_lookup
│   │   └── Functions:
│   │           assign_output_settings
│   └── output_lookup.py



│   │   └── Structuring_assigns.ipynb    we also need to make it as py file and include in the main idf creation folder










results will be saved in assigned folder, we have just few cods dor structuring some assigned files. 

also, we should put some real data, and also make it possible user be able to provide the real data in this folder. 

so, we should be able to see what real data we have,
 and we can later use it for validation and calibration for the one matches with the real data. 

also, based on real data we should be able to create base idf file and validate and maybe calibrate 

├── output
│   ├── assigned
│   │   ├── assigned_dhw_params.csv
│   │   ├── assigned_geometry.csv
│   │   ├── assigned_hvac_building.csv
│   │   ├── assigned_hvac_zones.csv
│   │   ├── assigned_lighting.csv
│   │   ├── assigned_setzone_params.csv
│   │   ├── assigned_vent_building.csv
│   │   ├── assigned_vent_zones.csv
│   │   ├── structured_fenez_params.csv
│   │   └── Structuring_assigns.ipynb
│   │   └── Description:
│       Stores the results of parameter assignments and structuring from simulations and calibrations.
│   
│   ├── output_IDFs
│   │   ├── building_0.idf
│   │   ├── building_1.idf
│   │   └── Description:
│       Contains the generated IDF files for each building scenario.
│   
│   ├── results
│   │   ├── master_parameters.csv
│   │   ├── master_parameters_mock.csv
│   │   ├── merged_as_is.csv
│   │   ├── merged_daily_mean.csv
│   │   ├── merged_daily_mean_mocked.csv
│   │   └── mock_merged_daily_mean.csv
│   │   └── Description:
│       Stores merged simulation results and master parameter datasets for analysis and validation. =====
│   
│   ├── Sim_Results
│   │   └── 2020.0
│   │       ├── simulation_bldg0.audit
│   │       ├── simulation_bldg0.bnd
│   │       ├── simulation_bldg0.csv
│   │       ............
│   │       ├── simulation_bldg1Table.htm
│   │       └── simulation_bldg1Zsz.csv
│   │       └── Description:
│       Contains detailed simulation results for each building, organized by year or simulation run.
│ 
│   ├── assigned_fenez_params.csv
│   ├── master_parameters_mock.csv




│   ├── real_data/
│   │   ├── real_data_1.csv
│   │   ├── real_data_1_info.csv
│   │   ├── real_data_2.csv
│   │   └── real_data_2_info.csv
│   │   └── Description:
│       Stores real-world data and accompanying metadata can be used for validation and calibration of simulations. users aslo should be able to provide it
│   
│   ├── validation_report.csv
│   │   └── Description:
│       Aggregates validation results comparing simulated data with real-world measurements, including checks for daily, hourly, and annual metrics.
│   


│   
│   ├── scenario_idfs/
│   │   ├── building_4136730_scenario_0.idf
│   │   ├── building_4136730_scenario_1.idf
│   │   ├── building_4136730_scenario_2.idf
│   │   ├── building_4136730_scenario_3.idf
│   │   └── building_4136730_scenario_4.idf
│   │   └── Description:
│       Contains IDF files for different simulation scenarios of a specific building coming from modifications.
│   
│   ├── scenarios/
│   │   ├── scenario_params_dhw.csv
│   │   ├── scenario_params_elec.csv
│   │   ├── scenario_params_fenez.csv
│   │   ├── scenario_params_hvac.csv
│   │   └── scenario_params_vent.csv
│   │   └── Description:
│       Stores parameter sets for various simulation scenarios, categorized by system type (DHW, Elec, Fenestration, HVAC, Ventilation) coming from modifications.
│   
:::: we need to add also simulation and validations of modifications
:::: we will also have calibration and optimization results
:::: save results and use later for surrogate, sensitive, calibration,
:::: figures and tables for the results


│   └── Description:
│       The `output/` directory houses all results, including assigned parameters, generated IDF files, simulation results, real-world data, validation reports, and scenario configurations. It also facilitates running and managing simulations.
│   





├── validation
│   ├── __pycache__
│   │   ├── compare_sims_with_measured.cpython-39.pyc
│   │   ├── metrics.cpython-39.pyc
│   │   ├── validate_results.cpython-39.pyc
│   │   ├── validate_results_custom.cpython-39.pyc
│   │   └── visualize.cpython-39.pyc
│   ├── compare_sims_with_measured.py
│   │   └── Imports:
│   │           pandas
│   │   └── Functions:
│   │       │   load_csv_as_df
│   │           align_data_for_variable
│   ├── main.py
│   │   └── Imports:
│   │       │   matplotlib.pyplot
│   │           csv
│   │   └── From Imports:
│   │           from validation.validate_results_custom import validate_with_ranges
│   │   └── Functions:
│   │       │   main
│   │           bar_chart_metrics_for_triple
│   ├── metrics.py
│   │   └── Imports:
│   │           numpy
│   │   └── Functions:
│   │       │   mean_bias_error
│   │       │   cv_rmse
│   │           nmbe
│   ├── validate_results.py
│   │   └── Imports:
│   │       │   os
│   │           pandas
│   │   └── From Imports:
│   │       │   from validation.compare_sims_with_measured import load_csv_as_df
│   │       │   from validation.compare_sims_with_measured import align_data_for_variable
│   │       │   from validation.metrics import mean_bias_error
│   │       │   from validation.metrics import cv_rmse
│   │       │   from validation.metrics import nmbe
│   │       │   from validation.visualize import plot_time_series_comparison
│   │       │   from validation.visualize import scatter_plot_comparison
│   │           from validation.visualize import bar_chart_metrics
│   │   └── Functions:
│   │       │   validate_data
│   │       │   save_metrics_to_csv
│   │           check_for_calibration
│   ├── validate_results_custom.py
│   │   └── Imports:
│   │           pandas
│   │   └── From Imports:
│   │       │   from validation.compare_sims_with_measured import load_csv_as_df
│   │       │   from validation.compare_sims_with_measured import align_data_for_variable
│   │       │   from validation.metrics import mean_bias_error
│   │       │   from validation.metrics import cv_rmse
│   │       │   from validation.metrics import nmbe
│   │       │   from validation.visualize import plot_time_series_comparison
│   │           from validation.visualize import scatter_plot_comparison
│   │   └── Functions:
│   │           validate_with_ranges
│   └── visualize.py
│       └── Imports:
│           │   matplotlib.pyplot
│               numpy
│       └── Functions:
│           │   plot_time_series_comparison
│           │   scatter_plot_comparison
│               bar_chart_metrics
│   └── Description:
│       The `validation/` 
here for the ones that we have real data and simulated data, we will do validation. 
so, the results wiill be saved as validation_report_...csv but need to be checked also if it is daily, hourly, annualy, ....  
It includes functionality for loading data, calculating statistical metrics, generating visualizations, and producing comprehensive validation reports.
│   


















├── modification
│   ├── aaaaaaaaaaa1.py
│   │   └── Imports:
│   │       │   itertools
│   │       │   random
│   │       │   numpy
│   │       │   pandas
│   │           pyDOE2
│   │   └── From Imports:
│   │       │   from typing import List
│   │       │   from typing import Dict
│   │           from typing import Union
│   │   └── Functions:
│   │       │   define_parameter_space
│   │       │   generate_full_factorial
│   │       │   generate_random_sampling
│   │       │   generate_latin_hypercube
│   │           generate_initial_configurations
│   ├── common_utils.py
│   │   └── Imports:
│   │       │   os
│   │       │   random
│   │           pandas
│   │   └── From Imports:
│   │           from eppy.modeleditor import IDF
│   │   └── Functions:
│   │       │   load_assigned_csv
│   │       │   filter_for_building
│   │       │   to_float_or_none
│   │       │   pick_value_in_range
│   │       │   define_building_param_strategy
│   │       │   generate_multiple_param_sets
│   │       │   save_param_scenarios_to_csv
│   │       │   load_idf
│   │       │   save_idf
│   │           load_scenario_csv
│   ├── dhw_functions.py
│   │   └── From Imports:
│   │           from eppy.modeleditor import IDF
│   │   └── Functions:
│   │       │   apply_dhw_params_to_idf
│   │           _create_or_update_dhw_schedules
│   ├── elec_functions.py
│   │   └── Imports:
│   │           math
│   │   └── Functions:
│   │       │   apply_building_level_elec
│   │       │   _create_or_update_lights_object
│   │       │   _create_or_update_equip_object
│   │       │   apply_object_level_elec
│   │       │   _update_generic_lights_obj
│   │           _update_generic_equip_obj
│   ├── fenez_functions.py
│   │   └── Imports:
│   │       │   pandas
│   │       │   math
│   │           random
│   │   └── Functions:
│   │       │   apply_object_level_fenez
│   │       │   _get_or_create_idf_object
│   │       │   _map_param_to_idf_field
│   │           _handle_rvalue_or_uvalue
│   ├── fenez_functions2.py
│   │   └── Imports:
│   │           pandas
│   │   └── From Imports:
│   │       │   from fenez.materials import update_construction_materials
│   │       │   from fenez.materials import assign_constructions_to_surfaces
│   │           from fenez.fenestration import add_fenestration
│   │   └── Functions:
│   │       │   apply_building_level_fenez
│   │       │   apply_object_level_fenez
│   │           _match_field_name
│   ├── hvac_functions.py
│   │   └── From Imports:
│   │           from eppy.modeleditor import IDF
│   │   └── Functions:
│   │       │   apply_building_level_hvac
│   │       │   _modify_schedule_compact
│   │       │   _set_ideal_loads_supply_temps_all_zones
│   │           apply_zone_level_hvac
│   ├── main_modifi.py
│   │   └── Imports:
│   │       │   os
│   │       │   pandas
│   │           random
│   │   └── From Imports:
│   │       │   from common_utils import load_assigned_csv
│   │       │   from common_utils import load_scenario_csv
│   │       │   from common_utils import load_idf
│   │       │   from common_utils import save_idf
│   │       │   from common_utils import generate_multiple_param_sets
│   │       │   from common_utils import save_param_scenarios_to_csv
│   │       │   from hvac_functions import apply_building_level_hvac
│   │       │   from hvac_functions import apply_zone_level_hvac
│   │       │   from dhw_functions import apply_dhw_params_to_idf
│   │       │   from vent_functions import apply_building_level_vent
│   │       │   from vent_functions import apply_zone_level_vent
│   │           from fenez_functions import apply_object_level_fenez
│   │   └── Functions:
│   │           main
│   └── vent_functions.py
│       └── Imports:
│               random
│       └── Functions:
│           │   apply_building_level_vent
│           │   _create_or_update_infiltration
│           │   _create_or_update_ventilation
│           │   _attach_vent_to_ideal_loads
│           │   apply_zone_level_vent
│               _create_zone_level_object


│   │   └── Description:
│       Handles the definition and generation of parameter configurations for scenario modifications based on predefined rules and parameter spaces.
│   
│   │   └── Description:
│       Provides utility functions for loading and saving data, parameter selection, and IDF file management to support modification processes.
│   
│   └── Description:
│       The `modification/` directory contains scripts and modules responsible for generating and applying parameter modifications to building models. 
This includes defining parameter spaces, generating scenarios, and applying changes to various building systems such as DHW, Elec, Fenestration, HVAC, and Ventilation.
│   













├── surrogate/
│   └── Description:
│       Handles the creation and updating of surrogate models based on building types. It saves surrogate model results for later use in simulations, sensitivity analysis, and optimization tasks.
│
    └── Description:


├── sensitive/
│   └── Description:
│       Manages sensitivity analysis methods and grouping objects. It saves sensitivity analysis results for future reference and further analysis.
│   
    └── Description:
The surrogate/ and sensitive/ directories are intended for advanced analysis techniques. Ensure that these modules are well-documented and provide clear interfaces for integrating with the main calibration and modification workflows.





├── calibration
│   ├── cal
│   │   ├── calibration_manager.py
│   │   │   └── Imports:
│   │   │       │   os
│   │   │       │   numpy
│   │   │           pandas
│   │   │   └── From Imports:
│   │   │       │   from typing import Dict
│   │   │       │   from typing import Any
│   │   │       │   from calibration.calibrator_random import random_calibration
│   │   │       │   from calibration.calibrator_ga import ga_calibration
│   │   │       │   from calibration.calibrator_bayes import bayes_calibration
│   │   │       │   from calibration.sensitivity import run_sensitivity_analysis
│   │   │       │   from calibration.ml_surrogate import SurrogateCalibrator
│   │   │       │   from generation.create_idfs import create_idf_files
│   │   │           from validation.validate_results import validate_data
│   │   │   └── Functions:
│   │   │       │   __init__
│   │   │       │   run_calibration
│   │   │       │   run_sensitivity
│   │   │           run_surrogate_calibration
│   │   │   └── Classes:
│   │   │           CalibrationManager
│   │   ├── calibrator_bayes.py
│   │   │   └── Imports:
│   │   │       │   random
│   │   │           pandas
│   │   │   └── From Imports:
│   │   │       │   from skopt import gp_minimize
│   │   │           from skopt.space import Real
│   │   │   └── Functions:
│   │   │       │   bayes_calibration
│   │   │       │   run_sim_and_validate
│   │   │           objective
│   │   ├── calibrator_ga.py
│   │   │   └── Imports:
│   │   │       │   random
│   │   │       │   copy
│   │   │           pandas
│   │   │   └── Functions:
│   │   │       │   ga_calibration
│   │   │       │   sample_param_set
│   │   │       │   run_sim_and_validate
│   │   │       │   tournament_select
│   │   │       │   crossover
│   │   │           mutate
│   │   ├── calibrator_random.py
│   │   │   └── Imports:
│   │   │       │   random
│   │   │           pandas
│   │   │   └── Functions:
│   │   │       │   random_calibration
│   │   │           run_sim_and_validate
│   │   ├── main_calibration.py
│   │   │   └── Imports:
│   │   │           os
│   │   │   └── From Imports:
│   │   │           from calibration.calibration_manager import CalibrationManager
│   │   │   └── Functions:
│   │   │           main
│   │   ├── ml_surrogate.py
│   │   │   └── Imports:
│   │   │       │   pandas
│   │   │           random
│   │   │   └── Functions:
│   │   │       │   sample_param_set
│   │   │       │   __init__
│   │   │       │   build_surrogate
│   │   │           optimize
│   │   │   └── Classes:
│   │   │           SurrogateCalibrator
│   │   └── sensitivity.py
│   │       └── Functions:
│   │               run_sensitivity_analysis
│   └── prepare_calibration_data.py
│       └── Imports:
│           │   os
│           │   pandas
│               numpy
│       └── Functions:
│           │   load_data
│           │   filter_numeric_parameters
│           │   create_param_set_id_column
│           │   merge_params_with_validation
│               prepare_calibration_data
    └── Description:
The calibration/ directory supports multiple calibration strategies. It s advisable to implement a strategy pattern within the CalibrationManager to allow easy switching between different calibration methods (e.g., Random, GA, Bayesian).











Iterate / Update
The placeholder Iterate_Update/ suggests an iterative process for updating parameters and models based on ongoing calibration and validation results. Consider integrating this functionality within the calibration/ and modification/ modules to maintain coherence and reduce redundancy.

iterate over loop 
reorts saved 

update lookups post calibration



























├── DHW
.....
├── Elec
.....
├── epw
.....
├── fenez
.....
├── geomz
.....
├── HVAC
.....
├── other
.....
├── postproc
.....
├── setzone
.....
├── shading
.....
├── tempground
.....
├── ventilation
.....
├── outputdef
.....








├── output
│   ├── assigned
│   │   ├── assigned_dhw_params.csv
│   │   ├── assigned_geometry.csv
│   │   ├── assigned_hvac_building.csv
│   │   ├── assigned_hvac_zones.csv
│   │   ├── assigned_lighting.csv
│   │   ├── assigned_setzone_params.csv
│   │   ├── assigned_vent_building.csv
│   │   ├── assigned_vent_zones.csv
│   │   ├── structured_fenez_params.csv
│   │   └── Structuring_assigns.ipynb
│   ├── output_IDFs
│   │   ├── building_0.idf
│   │   ├── building_0_85344a.idf
│   │   ├── building_1.idf
│   │   └── building_1_37cb48.idf
│   ├── results
│   │   ├── master_parameters.csv
│   │   ├── master_parameters_mock.csv
│   │   ├── merged_as_is.csv
│   │   ├── merged_daily_mean.csv
│   │   ├── merged_daily_mean_mocked.csv
│   │   └── mock_merged_daily_mean.csv
│   ├── scenario_idfs
│   │   ├── building_4136730_scenario_0.idf
│   │   ├── building_4136730_scenario_1.idf
│   │   ├── building_4136730_scenario_2.idf
│   │   ├── building_4136730_scenario_3.idf
│   │   └── building_4136730_scenario_4.idf
│   ├── scenarios
│   │   ├── scenario_params_dhw.csv
│   │   ├── scenario_params_elec.csv
│   │   ├── scenario_params_fenez.csv
│   │   ├── scenario_params_hvac.csv
│   │   └── scenario_params_vent.csv
│   ├── Sim_Results
│   │   └── 2020.0
│   │       ├── simulation_bldg0.audit
│   │       ├── simulation_bldg0.bnd
│   │       ├── simulation_bldg0.csv
│   │       ............
│   │       ├── simulation_bldg1Table.htm
│   │       └── simulation_bldg1Zsz.csv
│   ├── assigned_fenez_params.csv
│   ├── master_parameters_mock.csv



Below is a **textual summary** of the workflow describing the loop from initial data through calibration, re-runs, and analysis:

---

1. **Main Data & Lookup Tables**  
   - we begin with the **main building data** (e.g. function, age, area, etc.) and **various lookup tables** (fenestration, HVAC, DHW, etc.).  
   - we also have **user configurations** that specify how to override or randomize parameters .

2. **Create IDF File**  
   - For each building (row in our main data), we **create an IDF** using the building data + lookup tables + user overrides.  
   - During this process, we also **record the assigned values** (e.g. a specific WWR pick from a 0.25–0.35 range, or a DHW setpoint).  

3. **Run Simulations**  
   - After generating the IDF(s), we **run EnergyPlus simulations**.  
   - The outputs (CSV) give **simulated results** such as electricity consumption, heating demand, or DHW energy usage.

4. **Validation**  
   - we compare the simulated results against **real data** (e.g. measured energy use).  
   - A **validation report** is generated (showing MBE, CV(RMSE), pass/fail, etc.).  

5. **Decision: Next Step?**  
   - If the validation indicates acceptable accuracy, we may **stop**.  
   - Otherwise, we **iterate**: you generate *new sets of IDF files* with updated parameters (e.g. refined occupant densities, improved infiltration rates, etc.).  

6. **Generate More IDF Files & Run Again**  
   - In this “iterate” path, we create  multiple scenarios based on the base idf file, and user config that for various purposes and different valu assiging strategies to generate more idf files:  
     - Possibly based on post-calibration or updated values gleaned from the previous step.  
   - we run **simulations** again, **record assigned values** for each scenario, then **validate again**.  

7. **Analysis (Sensitivity / Surrogate / Optimization)**  
   - After we have done a few calibration runs—or if we want to explore more systematically—we might:  
     - **Perform a sensitivity analysis** (which parameters strongly affect the outputs?).  
     - **Create/update a surrogate model** (a faster approximation of E+ results).  
     - **Run an optimization** loop, using either the surrogate or direct E+ simulations to find the best parameter set.  

8. **Reporting**  
   - Throughout each **iteration** (pre-calibration, iteration 1, iteration 2, post-calibration, etc.), we keep a record of results.  
   - Final outputs can include:  
     - **Assigned parameter logs** (so you know exactly what was used).  
     - **Simulation results** (EnergyPlus outputs).  
     - **Validation reports** (MBE, CV(RMSE)).  
     - Any **optimization** or **surrogate** analysis results.

9. **Update Post-Calibration Values**  
   - Once satisfied with calibration or optimization outcomes, you can **update** your base assumptions or default dictionaries with the final “best fit” values.  
   - This closes the loop, as the new values feed back into **user configs** or **lookup tables**, improving future simulations.

---

In short, the process is **iterative**:  
1. Build IDFs →  
2. Simulate →  
3. Validate →  
4. Decide next step (e.g. calibrate, refine, analyze, or finalize).  
Depending on the results, we may enter a loop of **Generate → Simulate → Validate** until meeting your calibration or optimization goals. 

