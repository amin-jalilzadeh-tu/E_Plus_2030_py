import pandas as pd
import os

def create_elec_schedules(excel_file_path, output_file_path):
    """
    Reads an Excel file (e.g., 'elec_schedules.xlsx') containing building schedule data,
    and generates a Python file (e.g., 'schedules_lookup2.py') with a dictionary named
    SCHEDULE_DEFINITIONS. The structure is:

    SCHEDULE_DEFINITIONS = {
        "Office": {
            "Large": {
                "weekday": [
                    (start_hour, end_hour, fraction),
                    ...
                ],
                "weekend": [...],
                ...
            },
            ...
        },
        ...
    }
    """

    # 1) Ensure the Excel file exists
    if not os.path.exists(excel_file_path):
        print(f"Error: The file at {excel_file_path} was not found.")
        return

    # 2) Try reading the Excel file
    try:
        df = pd.read_excel(excel_file_path)
    except Exception as e:
        print(f"Error reading the Excel file: {e}")
        return

    # Normalize column names
    df.columns = df.columns.str.strip().str.lower()

    # Replace placeholder values with NaN
    df.replace('-', pd.NA, inplace=True)
    df.replace('', pd.NA, inplace=True)

    # 3) Validate required columns
    required_cols = [
        'building_category', 'building_subtype', 
        'day_type', 'start_hour', 'end_hour', 'fraction'
    ]
    missing = [c for c in required_cols if c not in df.columns]
    if missing:
        print(f"Error: Missing required columns in the Excel: {missing}")
        return

    # Optionally drop rows that have NaN in any required column
    df.dropna(subset=required_cols, inplace=True)

    # 4) Build the SCHEDULE_DEFINITIONS dictionary
    SCHEDULE_DEFINITIONS = {}

    # Group by building_category + building_subtype
    grouped = df.groupby(['building_category', 'building_subtype'])

    for (category, subtype), group_df in grouped:
        # Initialize nested dict if needed
        if category not in SCHEDULE_DEFINITIONS:
            SCHEDULE_DEFINITIONS[category] = {}
        
        # Sub-dict for each building_subtype
        subtype_dict = {}

        # Group again by day_type
        for day_type, day_df in group_df.groupby('day_type'):
            # Sort by start_hour (if you want chronological order)
            day_df = day_df.sort_values(by='start_hour')

            # Build a list of (start_hour, end_hour, fraction)
            schedule_list = []
            for _, row in day_df.iterrows():
                start_hr = float(row['start_hour'])
                end_hr   = float(row['end_hour'])
                fract    = float(row['fraction'])
                schedule_list.append((start_hr, end_hr, fract))
            
            # Add to the subtype_dict
            subtype_dict[day_type] = schedule_list

        # Store the subtype_dict under SCHEDULE_DEFINITIONS
        SCHEDULE_DEFINITIONS[category][subtype] = subtype_dict

    # 5) Write the dictionary to a Python file
    try:
        os.makedirs(os.path.dirname(output_file_path), exist_ok=True)
    except Exception as e:
        print(f"Error creating output directory: {e}")
        return

    try:
        with open(output_file_path, 'w', encoding='utf-8') as f:
            f.write("# This file is automatically generated. Do not edit manually.\n")
            f.write("SCHEDULE_DEFINITIONS = {\n")
            
            for cat_key, cat_val in SCHEDULE_DEFINITIONS.items():
                f.write(f'    "{cat_key}": {{\n')
                
                for subtype_key, subtype_val in cat_val.items():
                    f.write(f'        "{subtype_key}": {{\n')
                    
                    # subtype_val is a dict of day_types -> list of tuples
                    for day_key, day_list in subtype_val.items():
                        f.write(f'            "{day_key}": [\n')
                        
                        # Write each tuple, e.g., (0, 6, 0.05)
                        for sched_tuple in day_list:
                            f.write(f'                {sched_tuple},\n')
                        
                        f.write("            ],\n")  # end day_key array
                    f.write("        },\n")  # end of subtype
                f.write("    },\n")  # end of category
            f.write("}\n")

        print(f"SCHEDULE_DEFINITIONS dictionary successfully exported to {output_file_path}")

    except Exception as e:
        print(f"Error writing to {output_file_path}: {e}")
