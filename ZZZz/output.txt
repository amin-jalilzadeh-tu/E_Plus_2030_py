Folder: D:\Documents\E_Plus_2030_py\DHW

  File: assign_dhw_values.py
  --- File Contents Start ---
# DHW/assign_dhw_values.py

import random
from .dhw_lookup import dhw_lookup

def find_dhw_overrides(building_id, dhw_key, user_config):
    """
    Helper function to search user_config_dhw for any overrides 
    specific to this building_id and dhw_key.
    """
    matches = []
    for row in (user_config or []):
        if "building_id" in row:
            if row["building_id"] != building_id:
                continue
        if "dhw_key" in row:
            if row["dhw_key"] != dhw_key:
                continue
        matches.append(row)
    return matches

def pick_val_with_range(
    rng_tuple,
    strategy: str = "A",
    log_dict: dict = None,      # dictionary to store final value & range
    param_name: str = None      # e.g. "liters_per_person_per_day"
):
    """
    rng_tuple = (min_val, max_val)
    strategy  = "A" => pick midpoint
                "B" => random.uniform(min_val, max_val)
                else => pick min_val as fallback
    
    If log_dict is provided, store the final chosen value and (min_val, max_val)
    in e.g. log_dict[param_name] and log_dict[f"{param_name}_range"].
    """
    min_val, max_val = rng_tuple

    # If no valid range => return None
    if min_val is None and max_val is None:
        chosen = None
        if log_dict is not None and param_name is not None:
            log_dict[f"{param_name}_range"] = (None, None)
            log_dict[param_name] = None
        return chosen

    # Otherwise, pick a final value based on strategy
    if strategy == "A":  
        chosen = (min_val + max_val) / 2.0  # midpoint
    elif strategy == "B":  
        chosen = random.uniform(min_val, max_val)
    else:
        chosen = min_val  # fallback => pick lower bound

    # Store in the log if provided
    if log_dict is not None and param_name is not None:
        log_dict[f"{param_name}_range"] = (min_val, max_val)
        log_dict[param_name] = chosen

    return chosen

def assign_dhw_parameters(
    building_id: int,
    dhw_key: str,
    calibration_stage: str = "pre_calibration",
    strategy: str = "A",
    random_seed: int = None,
    user_config_dhw: list = None,
    assigned_dhw_log: dict = None,
    building_row: dict = None,
    use_nta: bool = False
):
    """
    Returns a dict of selected DHW parameter values from dhw_lookup + user overrides:
        - occupant_density_m2_per_person
        - liters_per_person_per_day
        - default_tank_volume_liters
        - default_heater_capacity_w
        - setpoint_c
        - usage_split_factor
        - peak_hours
        - sched_morning
        - sched_peak
        - sched_afternoon
        - sched_evening

    Steps:
      1) Identify the param ranges from dhw_lookup[calibration_stage][dhw_key], 
         or fallback if not found.
      2) Gather user_config overrides (if any) for this building_id & dhw_key,
         then override the param ranges accordingly.
      3) If the building is Residential and occupant_density_m2_per_person_range 
         is (None, None), compute occupant density from building_row's area 
         (and occupant_count formula, if desired).
      4) Use the chosen strategy ("A", "B", or fallback) to pick final numeric values.
      5) If use_nta=True => override occupant usage with occupant_count & liters 
         as per your custom logic in the code (area-based or occupant-based).
      6) Return a dict of final values and (optionally) store them in assigned_dhw_log.
    """

    # optional reproducibility
    if random_seed is not None:
        random.seed(random_seed)

    # 1) Determine the calibration stage dictionary
    if calibration_stage not in dhw_lookup:
        calibration_stage = "pre_calibration"
    stage_dict = dhw_lookup[calibration_stage]

    # If dhw_key not found => fallback
    if dhw_key not in stage_dict:
        fallback = {
            "occupant_density_m2_per_person": None,
            "liters_per_person_per_day": 50.0,
            "default_tank_volume_liters": 200.0,
            "default_heater_capacity_w": 4000.0,
            "setpoint_c": 60.0,
            "usage_split_factor": 0.6,
            "peak_hours": 2.0,
            "sched_morning": 0.7,
            "sched_peak": 1.0,
            "sched_afternoon": 0.2,
            "sched_evening": 0.8
        }
        # If we're logging assigned values:
        if assigned_dhw_log is not None:
            assigned_dhw_log[building_id] = {}
            for k, v in fallback.items():
                assigned_dhw_log[building_id][k] = v
                assigned_dhw_log[building_id][f"{k}_range"] = (v, v)
        return fallback

    # Found param ranges
    param_ranges = stage_dict[dhw_key]

    # 2) Gather user config overrides
    matches = find_dhw_overrides(building_id, dhw_key, user_config_dhw)

    def override_range(current_range, override_dict):
        """
        Convert override row to new (min_val, max_val) or (fixed_value, fixed_value).
        """
        if "fixed_value" in override_dict:
            fv = override_dict["fixed_value"]
            return (fv, fv)
        if "min_val" in override_dict and "max_val" in override_dict:
            return (override_dict["min_val"], override_dict["max_val"])
        return current_range

    # 3) Extract param ranges from param_ranges
    occdens_rng = param_ranges.get("occupant_density_m2_per_person_range", (None, None))
    liters_rng  = param_ranges.get("liters_per_person_per_day_range", (50.0, 50.0))
    vol_rng     = param_ranges.get("default_tank_volume_liters_range", (200.0, 200.0))
    cap_rng     = param_ranges.get("default_heater_capacity_w_range", (4000.0, 4000.0))
    setp_rng    = param_ranges.get("setpoint_c_range", (60.0, 60.0))
    usplit_rng  = param_ranges.get("usage_split_factor_range", (0.6, 0.6))
    peak_rng    = param_ranges.get("peak_hours_range", (2.0, 2.0))

    sched_morn_rng   = param_ranges.get("sched_morning_range", (0.7, 0.7))
    sched_peak_rng   = param_ranges.get("sched_peak_range", (1.0, 1.0))
    sched_aftern_rng = param_ranges.get("sched_afternoon_range", (0.2, 0.2))
    sched_even_rng   = param_ranges.get("sched_evening_range", (0.8, 0.8))

    # 3b) Apply any user_config overrides
    for row in matches:
        pname = row.get("param_name")
        if pname == "occupant_density_m2_per_person":
            occdens_rng = override_range(occdens_rng, row)
        elif pname == "liters_per_person_per_day":
            liters_rng = override_range(liters_rng, row)
        elif pname == "default_tank_volume_liters":
            vol_rng = override_range(vol_rng, row)
        elif pname == "default_heater_capacity_w":
            cap_rng = override_range(cap_rng, row)
        elif pname == "setpoint_c":
            setp_rng = override_range(setp_rng, row)
        elif pname == "usage_split_factor":
            usplit_rng = override_range(usplit_rng, row)
        elif pname == "peak_hours":
            peak_rng = override_range(peak_rng, row)
        elif pname == "sched_morning":
            sched_morn_rng = override_range(sched_morn_rng, row)
        elif pname == "sched_peak":
            sched_peak_rng = override_range(sched_peak_rng, row)
        elif pname == "sched_afternoon":
            sched_aftern_rng = override_range(sched_aftern_rng, row)
        elif pname == "sched_evening":
            sched_even_rng = override_range(sched_even_rng, row)

    # 3c) If building is Residential & occupant_density is (None, None), compute from building_row
    if building_row is not None:
        bldg_func = str(building_row.get("building_function", "")).lower()
        if "residential" in bldg_func:
            # occupant_density = area / occupant_count
            area = building_row.get("area", 80.0)
            occupant_count = building_row.get("occupant_count", None)
            if occupant_count is None:
                occupant_count = 1
                if area > 50:
                    occupant_count += 0.01 * (area - 50)
                occupant_count = max(1, occupant_count)

            # if occupant_density range is None => set to small band around computed
            if occdens_rng == (None, None):
                occupant_density_val = area / occupant_count
                occupant_density_min = 0.9 * occupant_density_val
                occupant_density_max = 1.1 * occupant_density_val
                occdens_rng = (occupant_density_min, occupant_density_max)

    # set up sub-log if needed
    if assigned_dhw_log is not None and building_id not in assigned_dhw_log:
        assigned_dhw_log[building_id] = {}

    # 4) Pick final numeric values for each parameter
    occupant_density = pick_val_with_range(
        occdens_rng,
        strategy,
        assigned_dhw_log.get(building_id),
        "occupant_density_m2_per_person"
    )
    liters_pp_day = pick_val_with_range(
        liters_rng,
        strategy,
        assigned_dhw_log.get(building_id),
        "liters_per_person_per_day"
    )
    tank_vol = pick_val_with_range(
        vol_rng,
        strategy,
        assigned_dhw_log.get(building_id),
        "default_tank_volume_liters"
    )
    heater_cap = pick_val_with_range(
        cap_rng,
        strategy,
        assigned_dhw_log.get(building_id),
        "default_heater_capacity_w"
    )
    setpoint_c = pick_val_with_range(
        setp_rng,
        strategy,
        assigned_dhw_log.get(building_id),
        "setpoint_c"
    )
    usage_split = pick_val_with_range(
        usplit_rng,
        strategy,
        assigned_dhw_log.get(building_id),
        "usage_split_factor"
    )
    peak_hrs = pick_val_with_range(
        peak_rng,
        strategy,
        assigned_dhw_log.get(building_id),
        "peak_hours"
    )
    sch_morn = pick_val_with_range(
        sched_morn_rng,
        strategy,
        assigned_dhw_log.get(building_id),
        "sched_morning"
    )
    sch_peak = pick_val_with_range(
        sched_peak_rng,
        strategy,
        assigned_dhw_log.get(building_id),
        "sched_peak"
    )
    sch_after = pick_val_with_range(
        sched_aftern_rng,
        strategy,
        assigned_dhw_log.get(building_id),
        "sched_afternoon"
    )
    sch_even = pick_val_with_range(
        sched_even_rng,
        strategy,
        assigned_dhw_log.get(building_id),
        "sched_evening"
    )

    # 5) If use_nta => override occupant usage from building_row in a second pass
    if use_nta and (building_row is not None):
        bfunc = str(building_row.get("building_function", "")).lower()
        area  = building_row.get("area", 80.0)

        if "residential" in bfunc:
            # occupant_count from area
            if area <= 50:
                occupant_count = 1
            else:
                occupant_count = 1 + 0.01 * (area - 50)
            occupant_count = max(1, occupant_count)

            # occupant_density => area / occupant_count
            occupant_density = area / occupant_count

            # total daily liters => occupant_count * 45
            total_daily_liters = occupant_count * 45.0
            liters_pp_day = total_daily_liters / occupant_count

            # Update assigned_dhw_log if present
            if assigned_dhw_log and building_id in assigned_dhw_log:
                assigned_dhw_log[building_id]["liters_per_person_per_day"] = liters_pp_day
                assigned_dhw_log[building_id]["occupant_density_m2_per_person"] = occupant_density

        else:
            # Non-res => daily liters from area-based approach
            nrtype = dhw_key  # or building_row.get("non_residential_type", "")
            factor_kwh = dhw_lookup["TABLE_13_1_KWH_PER_M2"].get(nrtype, 1.4)
            annual_kwh = factor_kwh * area
            annual_liters = annual_kwh * 13.76
            daily_liters  = annual_liters / 365.0

            if occupant_density and occupant_density > 0:
                occupant_count = max(1, area / occupant_density)
                new_liters_pp_day = daily_liters / occupant_count
            else:
                occupant_count = 1
                occupant_density = area
                new_liters_pp_day = daily_liters

            liters_pp_day = new_liters_pp_day

            if assigned_dhw_log and building_id in assigned_dhw_log:
                assigned_dhw_log[building_id]["liters_per_person_per_day"] = liters_pp_day
                assigned_dhw_log[building_id]["occupant_density_m2_per_person"] = occupant_density

    # 6) Build the final result dict
    result = {
        "occupant_density_m2_per_person": occupant_density,
        "liters_per_person_per_day": liters_pp_day,
        "default_tank_volume_liters": tank_vol,
        "default_heater_capacity_w": heater_cap,
        "setpoint_c": setpoint_c,
        "usage_split_factor": usage_split,
        "peak_hours": peak_hrs,
        "sched_morning": sch_morn,
        "sched_peak": sch_peak,
        "sched_afternoon": sch_after,
        "sched_evening": sch_even
    }
    return result

  --- File Contents End ---

  File: building_type_map.py
  --- File Contents Start ---
# DHW/building_type_map.py

def map_building_function_to_dhw_key(building_row):
    """
    Decide which DHW key from dhw_lookup to use, based on:

      - building_function: 'Residential' or 'Non-Residential'
      - For Residential, we use 'area' to assign one of:
          "Corner House"
          "Terrace or Semi-detached House"
          "Detached House"
          "Two-and-a-half-story House"
          "Apartment"
        (Feel free to adjust thresholds or logic as needed.)
      
      - For Non-Residential, we read the non_residential_type and map directly to:
          "Meeting Function"
          "Healthcare Function"
          "Sport Function"
          "Cell Function"
          "Retail Function"
          "Industrial Function"
          "Accommodation Function"
          "Office Function"
          "Education Function"
          "Other Use Function" (fallback)

    Returns the exact string that corresponds to the keys in your dhw_lookup.
    """

    bldg_func = (building_row.get("building_function") or "Residential").lower()
    bldg_area = building_row.get("area", 80)  # fallback if area not provided
    
    # ---------------------
    # RESIDENTIAL LOGIC
    # ---------------------
    if bldg_func == "residential":
        # Example area-based classification
        if bldg_area < 60:
            return "Corner House"
        elif bldg_area < 100:
            return "Terrace or Semi-detached House"
        elif bldg_area < 150:
            return "Detached House"
        elif bldg_area < 250:
            return "Two-and-a-half-story House"
        else:
            return "Apartment"

    # ---------------------
    # NON-RESIDENTIAL LOGIC
    # ---------------------
    else:
        nrtype = building_row.get("non_residential_type", "")
        # Map directly, or fallback to "Other Use Function"
        valid_nonres = {
            "Meeting Function":       "Meeting Function",
            "Healthcare Function":    "Healthcare Function",
            "Sport Function":         "Sport Function",
            "Cell Function":          "Cell Function",
            "Retail Function":        "Retail Function",
            "Industrial Function":    "Industrial Function",
            "Accommodation Function": "Accommodation Function",
            "Office Function":        "Office Function",
            "Education Function":     "Education Function",
            "Other Use Function":     "Other Use Function"
        }
        return valid_nonres.get(nrtype, "Other Use Function")

  --- File Contents End ---

  File: dhw_lookup.py
  --- File Contents Start ---
# DHW/dhw_lookup.py

# -------------------------------------------------------------------------------
# NTA 8800 References (Selection):
# -------------------------------------------------------------------------------
# - §§13.1–13.2 of NTA 8800 give an overview of hot tap water energy use,
#   net heat requirement, and occupant-based or area-based usage (esp. 13.2.2, 13.2.3).
# - Table 13.1 (page ~15 in the excerpt) gives typical daily liters at 60 °C per m²
#   for various non-residential functions (like offices, education, sport).
# - For residential, ~40 L/person/day at 60 °C is often cited (NTA 8800 note around p.15).
# - If a circulation loop exists, setpoint often goes to 65 °C (NTA 8800 references in 
#   13.6.2, 13.7.2.2.2).
#
# Below constants are approximate placeholders:
#  - The occupant_density_m2_per_person_range is the approximate range of floor area 
#    per occupant (lower area => higher occupant density).
#  - The liters_per_person_per_day_range is how many liters of 60 °C hot water each occupant uses daily.
#  - default_tank_volume_liters_range, default_heater_capacity_w_range are typical 
#    lumpsum approximations for tank sizing and heater capacity.
#  - setpoint_c_range typically ~60 °C, or 65 °C for certain healthcare/hospital contexts.
#  - usage_split_factor_range, peak_hours_range, sched_*_range are code-specific ways 
#    to shape daily usage.
# 
# You can adjust these numeric ranges as you see fit; they are example placeholders
# reflecting NTA 8800’s typical usage categories, matched to your new naming system.
# -------------------------------------------------------------------------------

dhw_lookup = {

    # -------------------------------------------------------------
    # TABLE_13_1_KWH_PER_M2 for area-based approach
    # (Renamed to match your new Non-Residential Type naming system)
    # -------------------------------------------------------------
    "TABLE_13_1_KWH_PER_M2": {
        "Meeting Function":       2.8,   # e.g. 2.8 kWh/m²/year
        "Office Function":        1.4,   # ~1.4 kWh/m²/year
        "Retail Function":        1.4,   # ~1.4 kWh/m²/year
        "Healthcare Function":   15.3,   # e.g. large hospital or care facility
        "Education Function":     1.4,   # ~1.4 kWh/m²/year
        "Sport Function":         12.5,   # placeholder for sports
        "Cell Function":          4.2,   # placeholder for penal/detention usage
        "Industrial Function":    1.2,   # placeholder for industrial usage
        "Accommodation Function": 12.5,  # typical hotel factor
        "Other Use Function":     2.4    # fallback
    },


    # ---------------------------------------------------------------------
    #  "pre_calibration" => broad ranges, approximate
    # ---------------------------------------------------------------------
    "pre_calibration": {

        # ==========================
        # Residential Types
        # ==========================

        # 1) Corner House
        #    Approx. occupant usage ~45–55 L/p/d. 
        #    occupant_density = None => code may do area-based occupant formula instead.
        "Corner House": {
            "occupant_density_m2_per_person_range": (None, None),
            "liters_per_person_per_day_range": (45.0, 55.0),
            "default_tank_volume_liters_range": (180.0, 220.0),
            "default_heater_capacity_w_range": (3500.0, 4500.0),
            "setpoint_c_range": (58.0, 60.0),
            "usage_split_factor_range": (0.5, 0.7),
            "peak_hours_range": (1.5, 2.5),
            "sched_morning_range": (0.6, 0.8),
            "sched_peak_range": (0.9, 1.1),
            "sched_afternoon_range": (0.1, 0.3),
            "sched_evening_range": (0.5, 0.9)
        },

        # 2) Apartment
        #    Could mirror 'multifamily' logic => occupant_density ~25–35 m²/p
        #    daily usage ~45–55 L/p/d
        "Apartment": {
            "occupant_density_m2_per_person_range": (25.0, 35.0),
            "liters_per_person_per_day_range": (45.0, 55.0),
            "default_tank_volume_liters_range": (900.0, 1100.0),
            "default_heater_capacity_w_range": (18000.0, 22000.0),
            "setpoint_c_range": (58.0, 60.0),
            "usage_split_factor_range": (0.5, 0.7),
            "peak_hours_range": (2.0, 3.0),
            "sched_morning_range": (0.5, 0.7),
            "sched_peak_range": (0.9, 1.1),
            "sched_afternoon_range": (0.2, 0.4),
            "sched_evening_range": (0.5, 0.8)
        },

        # 3) Terrace or Semi-detached House
        #    Similar usage to smaller single-family => ~45–55 L/p/d
        "Terrace or Semi-detached House": {
            "occupant_density_m2_per_person_range": (None, None),
            "liters_per_person_per_day_range": (45.0, 55.0),
            "default_tank_volume_liters_range": (180.0, 250.0),
            "default_heater_capacity_w_range": (3500.0, 5000.0),
            "setpoint_c_range": (58.0, 60.0),
            "usage_split_factor_range": (0.5, 0.7),
            "peak_hours_range": (2.0, 3.0),
            "sched_morning_range": (0.6, 0.8),
            "sched_peak_range": (0.9, 1.1),
            "sched_afternoon_range": (0.2, 0.4),
            "sched_evening_range": (0.5, 0.9)
        },

        # 4) Detached House
        #    Possibly higher daily usage => ~55–65 L/p/d
        "Detached House": {
            "occupant_density_m2_per_person_range": (None, None),
            "liters_per_person_per_day_range": (55.0, 65.0),
            "default_tank_volume_liters_range": (250.0, 350.0),
            "default_heater_capacity_w_range": (4000.0, 5000.0),
            "setpoint_c_range": (58.0, 60.0),
            "usage_split_factor_range": (0.5, 0.7),
            "peak_hours_range": (2.0, 3.0),
            "sched_morning_range": (0.6, 0.8),
            "sched_peak_range": (0.9, 1.1),
            "sched_afternoon_range": (0.2, 0.3),
            "sched_evening_range": (0.6, 1.0)
        },

        # 5) Two-and-a-half-story House
        #    Another single-family variant => placeholder usage ~50–60 L/p/d
        "Two-and-a-half-story House": {
            "occupant_density_m2_per_person_range": (None, None),
            "liters_per_person_per_day_range": (50.0, 60.0),
            "default_tank_volume_liters_range": (220.0, 320.0),
            "default_heater_capacity_w_range": (4000.0, 5000.0),
            "setpoint_c_range": (58.0, 60.0),
            "usage_split_factor_range": (0.5, 0.7),
            "peak_hours_range": (1.5, 2.5),
            "sched_morning_range": (0.6, 0.8),
            "sched_peak_range": (0.9, 1.1),
            "sched_afternoon_range": (0.2, 0.4),
            "sched_evening_range": (0.5, 0.9)
        },

        # ==========================
        # Non-Residential Types
        # ==========================

        # 1) Meeting Function
        #    Like "Assembly" => occupant_density ~1 m²/p, daily usage ~4–6 L/p/d
        "Meeting Function": {
            "occupant_density_m2_per_person_range": (0.8, 1.2),
            "liters_per_person_per_day_range": (4.0, 6.0),
            "default_tank_volume_liters_range": (400.0, 600.0),
            "default_heater_capacity_w_range": (13000.0, 17000.0),
            "setpoint_c_range": (58.0, 60.0),
            "usage_split_factor_range": (0.6, 0.8),
            "peak_hours_range": (2.0, 3.0),
            "sched_morning_range": (0.1, 0.2),
            "sched_peak_range": (0.6, 0.8),
            "sched_afternoon_range": (0.1, 0.3),
            "sched_evening_range": (0.2, 0.5)
        },

        # 2) Healthcare Function
        #    Could be outpatient or hospital => occupant_density (8–30), usage (18–70) 
        #    is a wide range. Feel free to split into "clinic" vs "hospital" if you prefer.
        "Healthcare Function": {
            "occupant_density_m2_per_person_range": (8.0, 30.0),
            "liters_per_person_per_day_range": (18.0, 70.0),
            "default_tank_volume_liters_range": (1000.0, 5000.0),
            "default_heater_capacity_w_range": (20000.0, 50000.0),
            "setpoint_c_range": (58.0, 65.0),  # might go higher in hospital contexts
            "usage_split_factor_range": (0.6, 0.8),
            "peak_hours_range": (2.0, 3.0),
            "sched_morning_range": (0.2, 0.4),
            "sched_peak_range": (0.6, 0.8),
            "sched_afternoon_range": (0.2, 0.4),
            "sched_evening_range": (0.1, 0.3)
        },

        # 3) Sport Function
        #    Similar to "Sports_Facility" => occupant_density ~8–12, usage ~25–35 L/p/d
        "Sport Function": {
            "occupant_density_m2_per_person_range": (8.0, 12.0),
            "liters_per_person_per_day_range": (25.0, 35.0),
            "default_tank_volume_liters_range": (2800.0, 3200.0),
            "default_heater_capacity_w_range": (38000.0, 42000.0),
            "setpoint_c_range": (58.0, 60.0),
            "usage_split_factor_range": (0.6, 0.8),
            "peak_hours_range": (2.0, 3.0),
            "sched_morning_range": (0.2, 0.4),
            "sched_peak_range": (0.6, 0.8),
            "sched_afternoon_range": (0.2, 0.4),
            "sched_evening_range": (0.3, 0.6)
        },

        # 4) Cell Function
        #    Placeholder for a detention/penal facility => occupant_density could vary widely.
        #    For demonstration: occupant_density ~10–20, usage ~30–40 L/p/d
        "Cell Function": {
            "occupant_density_m2_per_person_range": (10.0, 20.0),
            "liters_per_person_per_day_range": (30.0, 40.0),
            "default_tank_volume_liters_range": (1000.0, 3000.0),
            "default_heater_capacity_w_range": (20000.0, 40000.0),
            "setpoint_c_range": (58.0, 60.0),
            "usage_split_factor_range": (0.6, 0.8),
            "peak_hours_range": (2.0, 3.0),
            "sched_morning_range": (0.2, 0.4),
            "sched_peak_range": (0.7, 0.8),
            "sched_afternoon_range": (0.2, 0.4),
            "sched_evening_range": (0.4, 0.7)
        },

        # 5) Retail Function
        #    occupant_density ~4–6, usage ~4–6 L/p/d
        "Retail Function": {
            "occupant_density_m2_per_person_range": (4.0, 6.0),
            "liters_per_person_per_day_range": (4.0, 6.0),
            "default_tank_volume_liters_range": (250.0, 350.0),
            "default_heater_capacity_w_range": (9000.0, 11000.0),
            "setpoint_c_range": (58.0, 60.0),
            "usage_split_factor_range": (0.6, 0.8),
            "peak_hours_range": (2.0, 3.0),
            "sched_morning_range": (0.1, 0.3),
            "sched_peak_range": (0.5, 0.7),
            "sched_afternoon_range": (0.2, 0.4),
            "sched_evening_range": (0.1, 0.2)
        },

        # 6) Industrial Function
        #    occupant_density can be quite low or varied => (12.0, 30.0)
        #    usage might be moderate => (10–20 L/p/d), placeholders only
        "Industrial Function": {
            "occupant_density_m2_per_person_range": (12.0, 30.0),
            "liters_per_person_per_day_range": (10.0, 20.0),
            "default_tank_volume_liters_range": (500.0, 2000.0),
            "default_heater_capacity_w_range": (10000.0, 30000.0),
            "setpoint_c_range": (58.0, 60.0),
            "usage_split_factor_range": (0.6, 0.8),
            "peak_hours_range": (2.0, 3.0),
            "sched_morning_range": (0.2, 0.3),
            "sched_peak_range": (0.6, 0.7),
            "sched_afternoon_range": (0.2, 0.4),
            "sched_evening_range": (0.2, 0.3)
        },

        # 7) Accommodation Function
        #    Like hotels => occupant_density ~15–25, usage ~50–70 L/p/d
        "Accommodation Function": {
            "occupant_density_m2_per_person_range": (15.0, 25.0),
            "liters_per_person_per_day_range": (50.0, 70.0),
            "default_tank_volume_liters_range": (1800.0, 2200.0),
            "default_heater_capacity_w_range": (28000.0, 32000.0),
            "setpoint_c_range": (58.0, 60.0),
            "usage_split_factor_range": (0.6, 0.8),
            "peak_hours_range": (2.0, 3.0),
            "sched_morning_range": (0.2, 0.4),
            "sched_peak_range": (0.8, 1.0),
            "sched_afternoon_range": (0.2, 0.4),
            "sched_evening_range": (0.4, 0.7)
        },

        # 8) Office Function
        #    occupant_density ~12–18, usage ~8–12 L/p/d
        "Office Function": {
            "occupant_density_m2_per_person_range": (12.0, 18.0),
            "liters_per_person_per_day_range": (8.0, 12.0),
            "default_tank_volume_liters_range": (250.0, 350.0),
            "default_heater_capacity_w_range": (7000.0, 9000.0),
            "setpoint_c_range": (58.0, 62.0),
            "usage_split_factor_range": (0.6, 0.8),
            "peak_hours_range": (2.0, 3.0),
            "sched_morning_range": (0.1, 0.2),
            "sched_peak_range": (0.5, 0.7),
            "sched_afternoon_range": (0.2, 0.4),
            "sched_evening_range": (0.05, 0.2)
        },

        # 9) Education Function
        #    occupant_density ~6–10, usage ~8–12 L/p/d
        "Education Function": {
            "occupant_density_m2_per_person_range": (6.0, 10.0),
            "liters_per_person_per_day_range": (8.0, 12.0),
            "default_tank_volume_liters_range": (400.0, 600.0),
            "default_heater_capacity_w_range": (9000.0, 11000.0),
            "setpoint_c_range": (58.0, 60.0),
            "usage_split_factor_range": (0.6, 0.8),
            "peak_hours_range": (2.0, 3.0),
            "sched_morning_range": (0.1, 0.3),
            "sched_peak_range": (0.5, 0.7),
            "sched_afternoon_range": (0.2, 0.4),
            "sched_evening_range": (0.1, 0.2)
        },

        # 10) Other Use Function
        #     Fallback => occupant_density ~5–15, usage ~5–15 L/p/d
        "Other Use Function": {
            "occupant_density_m2_per_person_range": (5.0, 15.0),
            "liters_per_person_per_day_range": (5.0, 15.0),
            "default_tank_volume_liters_range": (300.0, 600.0),
            "default_heater_capacity_w_range": (9000.0, 15000.0),
            "setpoint_c_range": (58.0, 60.0),
            "usage_split_factor_range": (0.5, 0.7),
            "peak_hours_range": (2.0, 2.5),
            "sched_morning_range": (0.1, 0.2),
            "sched_peak_range": (0.5, 0.7),
            "sched_afternoon_range": (0.2, 0.4),
            "sched_evening_range": (0.2, 0.3)
        },
    },

    # ---------------------------------------------------------------------
    #  "post_calibration" => narrower or fixed values, reflecting final 
    #  calibrated parameters. You can further refine or unify them.
    # ---------------------------------------------------------------------
    "post_calibration": {

        # ==========================
        # Residential
        # ==========================
        "Corner House": {
            "occupant_density_m2_per_person_range": (None, None),
            "liters_per_person_per_day_range": (50.0, 50.0),
            "default_tank_volume_liters_range": (200.0, 200.0),
            "default_heater_capacity_w_range": (4000.0, 4000.0),
            "setpoint_c_range": (60.0, 60.0),
            "usage_split_factor_range": (0.6, 0.6),
            "peak_hours_range": (2.0, 2.0),
            "sched_morning_range": (0.7, 0.7),
            "sched_peak_range": (1.0, 1.0),
            "sched_afternoon_range": (0.2, 0.2),
            "sched_evening_range": (0.8, 0.8)
        },

        "Apartment": {
            "occupant_density_m2_per_person_range": (30.0, 30.0),
            "liters_per_person_per_day_range": (50.0, 50.0),
            "default_tank_volume_liters_range": (1000.0, 1000.0),
            "default_heater_capacity_w_range": (20000.0, 20000.0),
            "setpoint_c_range": (60.0, 60.0),
            "usage_split_factor_range": (0.6, 0.6),
            "peak_hours_range": (2.0, 2.0),
            "sched_morning_range": (0.7, 0.7),
            "sched_peak_range": (1.0, 1.0),
            "sched_afternoon_range": (0.2, 0.2),
            "sched_evening_range": (0.8, 0.8)
        },

        "Terrace or Semi-detached House": {
            "occupant_density_m2_per_person_range": (None, None),
            "liters_per_person_per_day_range": (50.0, 50.0),
            "default_tank_volume_liters_range": (200.0, 200.0),
            "default_heater_capacity_w_range": (4000.0, 4000.0),
            "setpoint_c_range": (60.0, 60.0),
            "usage_split_factor_range": (0.6, 0.6),
            "peak_hours_range": (2.0, 2.0),
            "sched_morning_range": (0.7, 0.7),
            "sched_peak_range": (1.0, 1.0),
            "sched_afternoon_range": (0.2, 0.2),
            "sched_evening_range": (0.8, 0.8)
        },

        "Detached House": {
            "occupant_density_m2_per_person_range": (None, None),
            "liters_per_person_per_day_range": (60.0, 60.0),
            "default_tank_volume_liters_range": (300.0, 300.0),
            "default_heater_capacity_w_range": (5000.0, 5000.0),
            "setpoint_c_range": (60.0, 60.0),
            "usage_split_factor_range": (0.6, 0.6),
            "peak_hours_range": (2.5, 2.5),
            "sched_morning_range": (0.7, 0.7),
            "sched_peak_range": (1.0, 1.0),
            "sched_afternoon_range": (0.2, 0.2),
            "sched_evening_range": (0.8, 0.8)
        },

        "Two-and-a-half-story House": {
            "occupant_density_m2_per_person_range": (None, None),
            "liters_per_person_per_day_range": (55.0, 55.0),
            "default_tank_volume_liters_range": (250.0, 250.0),
            "default_heater_capacity_w_range": (4500.0, 4500.0),
            "setpoint_c_range": (60.0, 60.0),
            "usage_split_factor_range": (0.6, 0.6),
            "peak_hours_range": (2.0, 2.0),
            "sched_morning_range": (0.7, 0.7),
            "sched_peak_range": (1.0, 1.0),
            "sched_afternoon_range": (0.2, 0.2),
            "sched_evening_range": (0.8, 0.8)
        },

        # ==========================
        # Non-Residential
        # ==========================
        "Meeting Function": {
            "occupant_density_m2_per_person_range": (1.0, 1.0),
            "liters_per_person_per_day_range": (5.0, 5.0),
            "default_tank_volume_liters_range": (500.0, 500.0),
            "default_heater_capacity_w_range": (15000.0, 15000.0),
            "setpoint_c_range": (60.0, 60.0),
            "usage_split_factor_range": (0.6, 0.6),
            "peak_hours_range": (2.0, 2.0),
            "sched_morning_range": (0.2, 0.2),
            "sched_peak_range": (0.6, 0.6),
            "sched_afternoon_range": (0.2, 0.2),
            "sched_evening_range": (0.5, 0.5)
        },

        "Healthcare Function": {
            "occupant_density_m2_per_person_range": (20.0, 20.0),
            "liters_per_person_per_day_range": (60.0, 60.0),
            "default_tank_volume_liters_range": (3000.0, 3000.0),
            "default_heater_capacity_w_range": (40000.0, 40000.0),
            "setpoint_c_range": (65.0, 65.0),
            "usage_split_factor_range": (0.7, 0.7),
            "peak_hours_range": (3.0, 3.0),
            "sched_morning_range": (0.3, 0.3),
            "sched_peak_range": (0.7, 0.7),
            "sched_afternoon_range": (0.3, 0.3),
            "sched_evening_range": (0.5, 0.5)
        },

        "Sport Function": {
            "occupant_density_m2_per_person_range": (10.0, 10.0),
            "liters_per_person_per_day_range": (30.0, 30.0),
            "default_tank_volume_liters_range": (3000.0, 3000.0),
            "default_heater_capacity_w_range": (40000.0, 40000.0),
            "setpoint_c_range": (60.0, 60.0),
            "usage_split_factor_range": (0.6, 0.6),
            "peak_hours_range": (2.0, 2.0),
            "sched_morning_range": (0.3, 0.3),
            "sched_peak_range": (0.7, 0.7),
            "sched_afternoon_range": (0.3, 0.3),
            "sched_evening_range": (0.6, 0.6)
        },

        "Cell Function": {
            "occupant_density_m2_per_person_range": (15.0, 15.0),
            "liters_per_person_per_day_range": (35.0, 35.0),
            "default_tank_volume_liters_range": (2000.0, 2000.0),
            "default_heater_capacity_w_range": (30000.0, 30000.0),
            "setpoint_c_range": (60.0, 60.0),
            "usage_split_factor_range": (0.6, 0.6),
            "peak_hours_range": (2.5, 2.5),
            "sched_morning_range": (0.3, 0.3),
            "sched_peak_range": (0.7, 0.7),
            "sched_afternoon_range": (0.3, 0.3),
            "sched_evening_range": (0.5, 0.5)
        },

        "Retail Function": {
            "occupant_density_m2_per_person_range": (5.0, 5.0),
            "liters_per_person_per_day_range": (5.0, 5.0),
            "default_tank_volume_liters_range": (300.0, 300.0),
            "default_heater_capacity_w_range": (10000.0, 10000.0),
            "setpoint_c_range": (60.0, 60.0),
            "usage_split_factor_range": (0.6, 0.6),
            "peak_hours_range": (2.0, 2.0),
            "sched_morning_range": (0.1, 0.1),
            "sched_peak_range": (0.7, 0.7),
            "sched_afternoon_range": (0.2, 0.2),
            "sched_evening_range": (0.1, 0.1)
        },

        "Industrial Function": {
            "occupant_density_m2_per_person_range": (20.0, 20.0),
            "liters_per_person_per_day_range": (15.0, 15.0),
            "default_tank_volume_liters_range": (1000.0, 1000.0),
            "default_heater_capacity_w_range": (20000.0, 20000.0),
            "setpoint_c_range": (60.0, 60.0),
            "usage_split_factor_range": (0.6, 0.6),
            "peak_hours_range": (2.0, 2.0),
            "sched_morning_range": (0.2, 0.2),
            "sched_peak_range": (0.6, 0.6),
            "sched_afternoon_range": (0.2, 0.2),
            "sched_evening_range": (0.3, 0.3)
        },

        "Accommodation Function": {
            "occupant_density_m2_per_person_range": (20.0, 20.0),
            "liters_per_person_per_day_range": (60.0, 60.0),
            "default_tank_volume_liters_range": (2000.0, 2000.0),
            "default_heater_capacity_w_range": (30000.0, 30000.0),
            "setpoint_c_range": (60.0, 60.0),
            "usage_split_factor_range": (0.6, 0.6),
            "peak_hours_range": (2.0, 2.0),
            "sched_morning_range": (0.3, 0.3),
            "sched_peak_range": (0.8, 0.8),
            "sched_afternoon_range": (0.3, 0.3),
            "sched_evening_range": (0.6, 0.6)
        },

        "Office Function": {
            "occupant_density_m2_per_person_range": (15.0, 15.0),
            "liters_per_person_per_day_range": (10.0, 10.0),
            "default_tank_volume_liters_range": (300.0, 300.0),
            "default_heater_capacity_w_range": (8000.0, 8000.0),
            "setpoint_c_range": (60.0, 60.0),
            "usage_split_factor_range": (0.7, 0.7),
            "peak_hours_range": (2.5, 2.5),
            "sched_morning_range": (0.15, 0.15),
            "sched_peak_range": (0.6, 0.6),
            "sched_afternoon_range": (0.3, 0.3),
            "sched_evening_range": (0.1, 0.1)
        },

        "Education Function": {
            "occupant_density_m2_per_person_range": (8.0, 8.0),
            "liters_per_person_per_day_range": (10.0, 10.0),
            "default_tank_volume_liters_range": (500.0, 500.0),
            "default_heater_capacity_w_range": (10000.0, 10000.0),
            "setpoint_c_range": (60.0, 60.0),
            "usage_split_factor_range": (0.6, 0.6),
            "peak_hours_range": (2.0, 2.0),
            "sched_morning_range": (0.2, 0.2),
            "sched_peak_range": (0.6, 0.6),
            "sched_afternoon_range": (0.2, 0.2),
            "sched_evening_range": (0.1, 0.1)
        },

        "Other Use Function": {
            "occupant_density_m2_per_person_range": (10.0, 10.0),
            "liters_per_person_per_day_range": (10.0, 10.0),
            "default_tank_volume_liters_range": (400.0, 400.0),
            "default_heater_capacity_w_range": (10000.0, 10000.0),
            "setpoint_c_range": (60.0, 60.0),
            "usage_split_factor_range": (0.6, 0.6),
            "peak_hours_range": (2.0, 2.0),
            "sched_morning_range": (0.2, 0.2),
            "sched_peak_range": (0.6, 0.6),
            "sched_afternoon_range": (0.2, 0.2),
            "sched_evening_range": (0.3, 0.3)
        }
    }
}


"""
Provides a single dictionary `dhw_lookup` with detailed parameter ranges
for your new usage types. Each is labeled exactly as you specified:

- Residential: 
   "Corner House", "Apartment", "Terrace or Semi-detached House",
   "Detached House", "Two-and-a-half-story House"

- Non-Residential:
   "Meeting Function", "Healthcare Function", "Sport Function", 
   "Cell Function", "Retail Function", "Industrial Function",
   "Accommodation Function", "Office Function", "Education Function",
   "Other Use Function"

The numeric ranges are example placeholders reflecting typical NTA 8800
values; you can edit them to match local data. For usage patterns with
circulation loops (e.g. hospitals), you might see higher setpoints (~65 °C).

We also updated the "TABLE_13_1_KWH_PER_M2" keys to match the new 
non-res naming (e.g. "Meeting Function", "Healthcare Function", etc.).
Adjust or extend these as needed.
"""

  --- File Contents End ---

  File: dhw_overrides_from_excel.py
  --- File Contents Start ---
# dhw_overrides_from_excel.py

import pandas as pd
import copy

def override_dhw_lookup_from_excel(excel_path, default_dhw_lookup):
    """
    Reads an Excel file with columns like:
      - calibration_stage, dhw_key
      - occupant_density_m2_per_person_min, occupant_density_m2_per_person_max
      - setpoint_c_min, setpoint_c_max
      - (etc.)

    Only updates/extends the entries for which both `_min` and `_max` are non-empty.
    Returns a new dictionary with partial overrides applied.
    """
    new_dhw_lookup = copy.deepcopy(default_dhw_lookup)
    df = pd.read_excel(excel_path)

    # Map short param name => the keys used in dhw_lookup
    param_map = {
        "occupant_density_m2_per_person": "occupant_density_m2_per_person_range",
        "liters_per_person_per_day": "liters_per_person_per_day_range",
        "default_tank_volume_liters": "default_tank_volume_liters_range",
        "default_heater_capacity_w": "default_heater_capacity_w_range",
        "setpoint_c": "setpoint_c_range",
        "usage_split_factor": "usage_split_factor_range",
        "peak_hours": "peak_hours_range",

        "sched_morning": "sched_morning_range",
        "sched_peak": "sched_peak_range",
        "sched_afternoon": "sched_afternoon_range",
        "sched_evening": "sched_evening_range"
    }

    for _, row in df.iterrows():
        stage = str(row["calibration_stage"]).strip()
        dhw_key = str(row["dhw_key"]).strip()

        if stage not in new_dhw_lookup:
            new_dhw_lookup[stage] = {}
        if dhw_key not in new_dhw_lookup[stage]:
            new_dhw_lookup[stage][dhw_key] = {}

        entry_dict = new_dhw_lookup[stage][dhw_key]

        for base_param, lookup_key in param_map.items():
            col_min = f"{base_param}_min"
            col_max = f"{base_param}_max"
            if col_min in df.columns and col_max in df.columns:
                val_min = row[col_min]
                val_max = row[col_max]
                if pd.notna(val_min) and pd.notna(val_max):
                    entry_dict[lookup_key] = (float(val_min), float(val_max))

    return new_dhw_lookup

  --- File Contents End ---

  File: parameters.py
  --- File Contents Start ---
# DHW/parameters.py

def calculate_dhw_parameters(
    assigned: dict,
    floor_area_m2: float = None,
    occupant_count: int = None
):
    """
    assigned = {
       "occupant_density_m2_per_person": ...,
       "liters_per_person_per_day": ...,
       "default_tank_volume_liters": ...,
       "default_heater_capacity_w": ...,
       "setpoint_c": ...,
       "usage_split_factor": ...,
       "peak_hours": ...
    }
    Compute occupant_count, daily liters, flow, etc.
    """

    occupant_density = assigned["occupant_density_m2_per_person"]
    liters_per_person = assigned["liters_per_person_per_day"]
    tank_liters = assigned["default_tank_volume_liters"]
    heater_w = assigned["default_heater_capacity_w"]
    setpoint_c = assigned["setpoint_c"]
    usage_split_factor = assigned["usage_split_factor"]
    peak_hours = assigned["peak_hours"]

    # 1) occupant_count
    if occupant_count is None:
        if occupant_density and floor_area_m2:
            occupant_count = floor_area_m2 / occupant_density
        else:
            occupant_count = 4  # fallback
    occupant_count = int(round(occupant_count))

    # 2) daily liters
    daily_liters = occupant_count * liters_per_person

    # 3) daily m³
    daily_m3 = daily_liters / 1000.0

    # 4) peak flow
    if peak_hours > 0:
        peak_flow_m3s = (daily_m3 * usage_split_factor) / (peak_hours * 3600.0)
    else:
        peak_flow_m3s = daily_m3 / (24.0 * 3600.0)

    # 5) tank volume (m3)
    tank_volume_m3 = tank_liters / 1000.0

    return {
        "occupant_count": occupant_count,
        "daily_liters": daily_liters,
        "peak_flow_m3s": peak_flow_m3s,
        "tank_volume_m3": tank_volume_m3,
        "heater_capacity_w": heater_w,
        "setpoint_c": setpoint_c
    }

  --- File Contents End ---

  File: schedules.py
  --- File Contents Start ---
# DHW/schedules.py

def create_dhw_schedules(
    idf, 
    schedule_name_suffix="DHW", 
    setpoint_c=60.0,
    morning_val=0.7,
    peak_val=1.0,
    afternoon_val=0.2,
    evening_val=0.8
):
    """
    Example: build a daily fraction schedule using the 4 'knobs':
      - morning_val
      - peak_val
      - afternoon_val
      - evening_val
    You can shape this however you want.
    """

    frac_sched_name = f"{schedule_name_suffix}_UseFraction"
    frac_sched = idf.newidfobject("SCHEDULE:COMPACT")
    frac_sched.Name = frac_sched_name
    frac_sched.Schedule_Type_Limits_Name = "Fraction"

    frac_sched.Field_1 = "Through: 12/31"
    frac_sched.Field_2 = "For: AllDays"

    # 06:00-08:00 => morning_val
    frac_sched.Field_3 = f"Until: 06:00, 0.0"
    frac_sched.Field_4 = f"Until: 08:00, {morning_val:.2f}"

    # 08:00-10:00 => peak_val
    frac_sched.Field_5 = f"Until: 10:00, {peak_val:.2f}"

    # 10:00-17:00 => afternoon_val
    frac_sched.Field_6 = f"Until: 17:00, {afternoon_val:.2f}"

    # 17:00-21:00 => evening_val
    frac_sched.Field_7 = f"Until: 21:00, {evening_val:.2f}"

    # 21:00-24:00 => back to morning_val or something else
    frac_sched.Field_8 = f"Until: 24:00, {morning_val:.2f}"

    # Now setpoint schedule
    setpoint_sched_name = f"{schedule_name_suffix}_Setpoint"
    setpoint_sched = idf.newidfobject("SCHEDULE:COMPACT")
    setpoint_sched.Name = setpoint_sched_name
    setpoint_sched.Schedule_Type_Limits_Name = "Temperature"
    setpoint_sched.Field_1 = "Through: 12/31"
    setpoint_sched.Field_2 = "For: AllDays"
    setpoint_sched.Field_3 = f"Until: 24:00, {setpoint_c}"

    return frac_sched_name, setpoint_sched_name

  --- File Contents End ---

  File: water_heater.py
  --- File Contents Start ---
# DHW/water_heater.py

from .assign_dhw_values import assign_dhw_parameters
from .parameters import calculate_dhw_parameters
from .schedules import create_dhw_schedules

def add_dhw_to_idf(
    idf,
    building_row,
    calibration_stage="pre_calibration",
    strategy="A",
    random_seed=None,
    name_suffix="MyDHW",
    user_config_dhw=None,
    assigned_dhw_log=None,
    use_nta=False
):
    """
    1) Retrieve 'dhw_key' directly from building_row (or use a fallback).
    2) Pull parameter ranges from dhw_lookup (or fallback).
    3) Merge with user_config_dhw if any.
    4) Calculate occupant_count, daily usage, peak flow, etc.
    5) Create schedules, then WaterHeater:Mixed object in the IDF.
    """

    # 1) Obtain the building's dhw_key from building_row, or fallback:
    #    e.g. if building_row["dhw_key"] might be "Apartment", "Detached House",
    #         "Office Function", etc.
    dhw_building_key = building_row.get("dhw_key", "Detached House")
    bldg_id = building_row.get("ogc_fid", 0)  # or your building ID field

    # 2) Assign from dhw_lookup, with user config overrides
    assigned = assign_dhw_parameters(
        building_id=bldg_id,
        dhw_key=dhw_building_key,
        calibration_stage=calibration_stage,
        strategy=strategy,
        random_seed=random_seed,
        user_config_dhw=user_config_dhw,
        assigned_dhw_log=assigned_dhw_log,
        building_row=building_row,
        use_nta=use_nta
    )

    # occupant_count if present
    occupant_count = building_row.get("occupant_count", None)
    floor_area_m2 = building_row.get("floor_area_m2", building_row.get("area", None))

    # 3) Calculate final numeric parameters (occupant_count, daily liters, etc.)
    params = calculate_dhw_parameters(
        assigned,
        floor_area_m2=floor_area_m2,
        occupant_count=occupant_count
    )

    # 4) Build schedules for use fraction & setpoint
    frac_sched_name, setpoint_sched_name = create_dhw_schedules(
        idf,
        schedule_name_suffix=name_suffix,
        setpoint_c=params["setpoint_c"],
        morning_val=assigned["sched_morning"],
        peak_val=assigned["sched_peak"],
        afternoon_val=assigned["sched_afternoon"],
        evening_val=assigned["sched_evening"]
    )

    # 5) Create the WaterHeater:Mixed object
    wh_name = f"{name_suffix}_WaterHeater"

    # Example logic for selecting fuel type & heater efficiency:
    # if the chosen dhw_key name includes "Residential", assume electricity, else gas
    # or you can do something like: "if 'Function' in dhw_key => Non-Residential"
    if "Function" in dhw_building_key:
        fuel_type = "NaturalGas"
        heater_eff = 0.8
    else:
        fuel_type = "Electricity"
        heater_eff = 0.9

    wh_obj = idf.newidfobject(
        "WATERHEATER:MIXED",
        Name=wh_name,
        Tank_Volume=params["tank_volume_m3"],
        Setpoint_Temperature_Schedule_Name=setpoint_sched_name,
        Deadband_Temperature_Difference=2.0,
        Maximum_Temperature_Limit=80.0,
        Heater_Control_Type="CYCLE",
        Heater_Maximum_Capacity=params["heater_capacity_w"],
        Heater_Fuel_Type=fuel_type,
        Heater_Thermal_Efficiency=heater_eff,
        Off_Cycle_Parasitic_Fuel_Consumption_Rate=0.0,
        Off_Cycle_Parasitic_Fuel_Type="Electricity",
        Off_Cycle_Parasitic_Heat_Fraction_to_Tank=0.0,
        On_Cycle_Parasitic_Fuel_Consumption_Rate=0.0,
        On_Cycle_Parasitic_Fuel_Type="Electricity",
        On_Cycle_Parasitic_Heat_Fraction_to_Tank=0.0,
        Ambient_Temperature_Indicator="SCHEDULE",
        Ambient_Temperature_Schedule_Name="Always22C",
        Off_Cycle_Loss_Coefficient_to_Ambient_Temperature=5.0,
        On_Cycle_Loss_Coefficient_to_Ambient_Temperature=5.0,
        Peak_Use_Flow_Rate=params["peak_flow_m3s"],
        Use_Flow_Rate_Fraction_Schedule_Name=frac_sched_name
    )

    # Optional debug prints
    print(f"[DHW] building_id={bldg_id}, dhw_key={dhw_building_key}")
    print(f"     occupant_count={params['occupant_count']} daily_liters={params['daily_liters']:.1f}")
    print(f"     setpoint={params['setpoint_c']:.1f} C, tank_volume={params['tank_volume_m3']:.3f} m³")
    print(f"     schedules => {frac_sched_name}, {setpoint_sched_name}")

    return wh_obj

  --- File Contents End ---

================================================================================

Folder: D:\Documents\E_Plus_2030_py\DHW\__pycache__

================================================================================

